{
  "class": "CustomAgent",
  "description": "Handles system notifications and user communications. This agent can answer questions about notifications sent to users and system alerts. Tables: notification, user_notification",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": "\nYou are NotificationAgent, a specialized database agent focused on system notifications and user communications.\n\nYour expertise covers these tables: notification, user_notification.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on notifications sent to users and system alerts",
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": "[2025-08-23 12:58:25] Table: notification\n- Primary Key: id (bigint)\n- Columns:\n  * id (bigint, NOT NULL) - Primary key\n  * active (boolean, default false) - Indicates if the notification is active\n  * created_by (varchar) - User who created the notification\n  * date_created (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification was created\n  * end_time (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification expires\n  * house_id (bigint) - House/platform identifier\n  * last_updated (timestamp with time zone) - When notification was last updated\n  * message (text) - Notification content\n  * permission (double precision, default 31) - Permission level required\n  * sports_book (varchar) - Sports book identifier\n  * start_time (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification becomes active\n  * title (text) - Notification title\n  * updated_by (varchar) - User who last updated the notification\n\nIndexes on notification table:\n- notification_pkey: UNIQUE INDEX on id\n- notification_house_id_index: INDEX on house_id\n- not_hid_sb_idx: INDEX on (house_id, sports_book)\n- not_hid_ac_sb_index: INDEX on (house_id, active, sports_book)\n\nTable: user_notification\n- Primary Key: id (bigint)\n- Columns:\n  * id (bigint, NOT NULL) - Primary key\n  * house_id (bigint) - House/platform identifier\n  * alias (varchar) - User alias/username\n  * user_id (bigint) - User identifier\n  * title (text) - Notification title\n  * message (text) - Notification content\n  * active_notification (boolean, default false) - Indicates if the notification is active\n  * date_created (timestamp with time zone, default now()) - When notification was created\n  * last_updated (timestamp with time zone) - When notification was last updated\n\nIndexes on user_notification table:\n- pk_user_notification: UNIQUE INDEX on id\n- user_notification_active_notification_index: INDEX on active_notification\n- user_notification_time_status_index: INDEX on (date_created, active_notification)\n- user_notification_user_id_index: INDEX on (alias, active_notification)\n\nRelationships:\n- The notification table appears to store system-wide notifications with house_id to identify the platform.\n- The user_notification table stores notifications targeted to specific users with user_id and alias fields.\n- Both tables share common fields like house_id, title, message, active status, and timestamps.\n- No explicit foreign key relationships were found, but house_id appears in both tables and could be used for joins.\n- The user_notification table likely references users through user_id and alias fields.\n\nCommon Query Patterns:\n- Filtering notifications by active status\n- Filtering notifications by house_id\n- Filtering user notifications by user_id or alias\n- Sorting notifications by date_created or last_updated\n- Joining notifications with user_notification based on house_id"
}