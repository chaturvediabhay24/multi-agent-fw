{
  "class": "CustomAgent",
  "description": "Tracks profit/loss metrics and house performance. This agent can answer questions about financial performance, daily house P&L, and exposure logs. Tables: pl, daily_house_pl, exposure_log, ha_pl_entity, kpi_entity, daily_entry",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": "\nYou are ProfitLossAgent, a specialized database agent focused on profit/loss tracking and performance metrics.\n\nYour expertise covers these tables: pl, daily_house_pl, exposure_log, ha_pl_entity, kpi_entity, daily_entry.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on financial performance, daily house P&L, and exposure tracking",
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": "[2025-08-23 12:52:48] Table: pl\nPrimary Key: id\nDescription: Stores profit and loss data for markets and events.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- win_count (bigint): Number of winning bets\n- account_id (bigint): ID of the account\n- market_type (integer): Type of market\n- matched_bets (bigint): Number of matched bets\n- matched_risk (double precision): Risk amount for matched bets\n- net_risk (double precision): Net risk amount\n- open_count (bigint): Count of open bets\n- parent_id (bigint): Parent account ID\n- settlement_amount (double precision): Amount settled\n- unmatched_bets (bigint): Number of unmatched bets\n- unmatched_risk (double precision): Risk amount for unmatched bets\n- update_time (timestamp): Last update time\n- user_count (bigint): Count of users\n- voided_count (bigint): Count of voided bets\n- bets_count (bigint): Total count of bets\n- category_type (integer): Type of category\n- create_time (timestamp): Creation time\n- event_date (timestamp): Date of the event\n- house_id (bigint): ID of the house\n- lossback_amount (double precision): Amount of lossback\n- lost_count (bigint): Count of lost bets\n- market_status (integer): Status of the market\n- account_path (varchar): Path of the account\n- market_name (varchar): Name of the market\n- market_result (varchar): Result of the market\n- competition_id (varchar): ID of the competition\n- competition_name (varchar): Name of the competition\n- sport_id (varchar): ID of the sport\n- sports_book (varchar): Sports book name\n- event_id (varchar): ID of the event\n- event_name (varchar): Name of the event\n- provider_id (varchar): ID of the provider\n- role (varchar): Role\n- username (varchar): Username\n- market_id (varchar): ID of the market\n\n[2025-08-23 12:52:56] Table: daily_house_pl\nPrimary Key: id\nDescription: Stores daily profit and loss data for houses.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- affiliate_bonus (numeric, default 0.00): Affiliate bonus amount\n- closing_balance (numeric, default 0.00): Closing balance\n- create_time (timestamp with time zone, default CURRENT_TIMESTAMP): Creation time\n- end_date (timestamp with time zone, default CURRENT_TIMESTAMP): End date\n- house_id (bigint, NOT NULL): ID of the house\n- house_pl (numeric, default 0.00): House profit/loss\n- opening_balance (numeric, default 0.00): Opening balance\n- start_date (timestamp with time zone, default CURRENT_TIMESTAMP): Start date\n- total_house_pl (numeric, default 0.00): Total house profit/loss\n- update_time (timestamp with time zone, default CURRENT_TIMESTAMP): Update time\n- user_bonus (numeric, default 0.00): User bonus amount\n- user_deposit (numeric, default 0.00): User deposit amount\n- user_pg_deposit (numeric, default 0.00): User payment gateway deposit amount\n- user_pg_withdrawal (numeric, default 0.00): User payment gateway withdrawal amount\n- user_refund (numeric, default 0.00): User refund amount\n- user_settlement_deposit (numeric, default 0.00): User settlement deposit amount\n- user_settlement_withdrawal (numeric, default 0.00): User settlement withdrawal amount\n- user_win_comm_deposit (numeric, default 0.00): User win commission deposit amount\n- user_win_comm_withdrawal (numeric, default 0.00): User win commission withdrawal amount\n- user_withdrawal (numeric, default 0.00): User withdrawal amount\n- version (bigint): Version number\n\n[2025-08-23 12:53:02] Table: exposure_log\nPrimary Key: id\nDescription: Logs user exposure data for bets and markets.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- user_id (bigint, NOT NULL): ID of the user\n- create_time (timestamp): Creation time\n- exposure (double precision, NOT NULL): Exposure amount\n- transaction_type (integer): Type of transaction\n- provider_id (varchar): ID of the provider\n- event_id (varchar): ID of the event\n- event_name (varchar): Name of the event\n- sport_id (varchar): ID of the sport\n- game_type (varchar): Type of game\n- market_id (varchar): ID of the market\n- market_name (varchar): Name of the market\n- bet_id (varchar): ID of the bet\n- category (varchar): Category\n- competition_id (varchar): ID of the competition\n- competition_name (varchar): Name of the competition\n\n[2025-08-23 12:53:07] Table: ha_pl_entity\nPrimary Key: id\nDescription: Stores house account profit and loss entity data.\nColumns:\n- id (varchar, NOT NULL): Primary key\n- day (date, NOT NULL): Date of the record\n- house_id (bigint, NOT NULL): ID of the house\n- profit (double precision, NOT NULL): Profit amount\n- category_type (varchar, NOT NULL): Type of category\n\n[2025-08-23 12:53:12] Table: kpi_entity\nPrimary Key: id\nDescription: Stores Key Performance Indicator data.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- create_time (timestamp, NOT NULL): Creation time\n- reference_id (bigint): Reference ID\n- value (double precision, NOT NULL): Value of the KPI\n- account_mode (integer): Mode of the account\n- account_id (bigint): ID of the account\n- account_path (varchar, NOT NULL): Path of the account\n- category (varchar, NOT NULL): Category\n- sub_category (varchar, NOT NULL): Sub-category\n- username (varchar): Username\n- sports_book (varchar): Sports book name\n\n[2025-08-23 12:53:22] Table: daily_entry\nPrimary Key: id\nDescription: Stores daily entry data for accounts including financial metrics.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- house_id (bigint): ID of the house\n- account_id (bigint): ID of the account\n- parent_id (bigint): Parent account ID\n- interval (smallint): Interval\n- start_date (timestamp with time zone, default now()): Start date\n- end_date (timestamp with time zone, default now()): End date\n- create_time (timestamp with time zone, default now()): Creation time\n- update_time (timestamp with time zone, default now()): Update time\n- placed_stake (numeric, default 0): Placed stake amount\n- returns (numeric, default 0): Returns amount\n- pl (numeric, default 0): Profit/Loss amount\n- deposits (bigint, default 0): Number of deposits\n- withdrawals (bigint, default 0): Number of withdrawals\n- deposit_amount (numeric, default 0): Total deposit amount\n- withdrawal_amount (numeric, default 0): Total withdrawal amount\n- sign_ups (bigint, default 0): Number of sign ups\n- first_deposits (bigint, default 0): Number of first deposits\n- first_deposits_amount (numeric, default 0): Amount of first deposits\n- life_time_sign_ups (bigint, default 0): Lifetime sign ups\n- life_time_deposits (bigint, default 0): Lifetime deposits\n- life_time_deposits_amount (bigint, default 0): Lifetime deposit amount\n- life_time_withdrawals (bigint, default 0): Lifetime withdrawals\n- life_time_withdraw_amount (bigint, default 0): Lifetime withdrawal amount\n- life_time_first_deposits (bigint, default 0): Lifetime first deposits\n- life_time_ftd_amount (numeric, default 0): Lifetime first deposit amount\n- life_time_placed_stake (numeric, default 0): Lifetime placed stake\n- life_time_profit (numeric, default 0): Lifetime profit\n- version (bigint): Version number\n- username (varchar): Username\n- sports_book (varchar): Sports book name\n- role (varchar): Role\n- account_path (varchar): Path of the account\n- affiliate_path (varchar): Path of the affiliate\n\n[2025-08-23 12:53:32] Table Relationships:\n\n1. house_id is a common key across multiple tables:\n   - pl.house_id\n   - daily_house_pl.house_id\n   - ha_pl_entity.house_id\n   - daily_entry.house_id\n   These can be joined to analyze profit/loss data across different house entities.\n\n2. account_id is present in:\n   - pl.account_id\n   - kpi_entity.account_id\n   - daily_entry.account_id\n   This can be used to link account-specific data across tables.\n\n3. User identification:\n   - exposure_log.user_id identifies specific users\n   - pl.username, kpi_entity.username, and daily_entry.username can be used to track user activities\n\n4. Time-based analysis:\n   - pl.create_time, pl.update_time, pl.event_date\n   - daily_house_pl.create_time, daily_house_pl.update_time, daily_house_pl.start_date, daily_house_pl.end_date\n   - exposure_log.create_time\n   - kpi_entity.create_time\n   - daily_entry.create_time, daily_entry.update_time, daily_entry.start_date, daily_entry.end_date\n   - ha_pl_entity.day\n   These can be used for time-series analysis and reporting periods.\n\n5. Market and event identification:\n   - pl.market_id, pl.event_id\n   - exposure_log.market_id, exposure_log.event_id\n   These can be used to analyze specific markets or events.\n\n6. Sports and competition data:\n   - pl.sport_id, pl.competition_id\n   - exposure_log.sport_id, exposure_log.competition_id\n   These can be used to analyze performance by sport or competition.\n\n[2025-08-23 12:53:40] Common Query Patterns:\n\n1. Daily Profit/Loss Analysis:\n   - Query daily_house_pl with date filters to analyze daily P&L\n   - Join with ha_pl_entity to get category-specific P&L breakdown\n   - Use daily_entry for more detailed metrics by account\n\n2. User Exposure Analysis:\n   - Query exposure_log filtered by user_id, event_id, or market_id\n   - Aggregate exposure by sport, competition, or market\n   - Track exposure changes over time\n\n3. Market Performance:\n   - Use pl table to analyze performance of specific markets\n   - Group by market_id, event_id, or sport_id\n   - Calculate win rates and settlement amounts\n\n4. KPI Tracking:\n   - Query kpi_entity filtered by category and sub_category\n   - Analyze KPI trends over time using create_time\n   - Compare KPIs across different accounts or sports books\n\n5. Account Hierarchy Analysis:\n   - Use account_path in pl, kpi_entity, and daily_entry\n   - Analyze performance across different levels of the account hierarchy\n   - Roll up metrics from child accounts to parent accounts\n\n6. Time-Series Analysis:\n   - Use date fields across tables for trend analysis\n   - Compare performance across different time periods\n   - Identify seasonal patterns or anomalies"
}