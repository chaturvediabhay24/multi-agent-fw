{
  "class": "CustomAgent",
  "description": "Tracks domain events and system changes. This agent can answer questions about system events, catalog changes, and database modifications. Tables: account_domain_event, wallet_domain_event, order_domain_event, catalog_domain_event, databasechangelog, databasechangeloglock, shedlock",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": "\nYou are EventTrackingAgent, a specialized database agent focused on domain events and system tracking.\n\nYour expertise covers these tables: account_domain_event, wallet_domain_event, order_domain_event, catalog_domain_event, databasechangelog, databasechangeloglock, shedlock.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on system events, catalog changes, and database modifications",
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": "[2025-08-23 12:59:34] Table: account_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to account operations/changes.\n\n[2025-08-23 12:59:41] Table: wallet_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to wallet operations/changes.\n\n[2025-08-23 12:59:48] Table: order_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to order operations/changes.\n\n[2025-08-23 12:59:56] Table: catalog_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- house_id: bigint, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to catalog operations/changes. Has an additional house_id column not present in other domain event tables.\n\n[2025-08-23 13:00:06] Table: databasechangelog\nColumns:\n- id: character varying, NOT NULL (Part of composite primary key)\n- author: character varying, NOT NULL (Part of composite primary key)\n- filename: character varying, NOT NULL (Part of composite primary key)\n- dateexecuted: timestamp without time zone, NOT NULL\n- orderexecuted: integer, NOT NULL\n- exectype: character varying, NOT NULL\n- md5sum: character varying, nullable\n- description: character varying, nullable\n- comments: character varying, nullable\n- tag: character varying, nullable\n- liquibase: character varying, nullable\n- contexts: character varying, nullable\n- labels: character varying, nullable\n- deployment_id: character varying, nullable\nPurpose: Tracks database schema changes managed by Liquibase. Contains records of all database migrations that have been applied.\n\n[2025-08-23 13:00:14] Table: databasechangeloglock\nColumns:\n- id: integer, NOT NULL (Primary key)\n- locked: boolean, NOT NULL\n- lockgranted: timestamp without time zone, nullable\n- lockedby: character varying, nullable\nPurpose: Used by Liquibase to prevent multiple instances from attempting to update the database simultaneously. Acts as a locking mechanism for database migrations.\n\n[2025-08-23 13:00:23] Table: shedlock\nColumns:\n- name: character varying, NOT NULL (Primary key)\n- lock_until: timestamp without time zone, nullable\n- locked_at: timestamp without time zone, nullable\n- locked_by: character varying, nullable\nPurpose: Used for distributed task scheduling, ensuring that scheduled tasks in a clustered environment run only once at the same time (prevents duplicate execution).\n\n[2025-08-23 13:00:31] Domain Event Tables Common Pattern:\nThe tables account_domain_event, wallet_domain_event, order_domain_event, and catalog_domain_event share a similar structure:\n- All have 'id' as primary key (bigint)\n- All contain 'data' column (bytea) that likely stores serialized event data\n- All have 'data_content_type' to indicate the format of the data\n- All have 'source' to indicate the origin of the event\n- All have 'time' with default CURRENT_TIMESTAMP(6)\n- All have 'type' to classify the event\n- Only catalog_domain_event has an additional 'house_id' column\n\nDatabase Management Tables:\n- databasechangelog: Tracks database schema changes (Liquibase migrations)\n- databasechangeloglock: Prevents concurrent Liquibase migrations\n- shedlock: Manages distributed task scheduling locks\n\nRelationships:\n- The domain event tables don't appear to have direct foreign key relationships with each other\n- They likely relate to other tables in the system not included in this exploration\n- The domain event tables follow the event sourcing pattern, capturing state changes in the system\n\n[2025-08-23 13:00:37] Query Patterns:\n1. To query domain events by time range:\n   SELECT * FROM [domain_event_table] WHERE time BETWEEN [start_time] AND [end_time]\n\n2. To query domain events by type:\n   SELECT * FROM [domain_event_table] WHERE type = '[event_type]'\n\n3. To count events by type:\n   SELECT type, COUNT(*) FROM [domain_event_table] GROUP BY type\n\n4. To find recent database changes:\n   SELECT id, author, filename, dateexecuted, description FROM databasechangelog ORDER BY dateexecuted DESC LIMIT [n]\n\n5. To check if any database migration is currently running:\n   SELECT * FROM databasechangeloglock WHERE locked = true\n\n6. To check scheduled tasks that are currently locked:\n   SELECT * FROM shedlock WHERE lock_until > NOW()\n\n7. For catalog events related to a specific house:\n   SELECT * FROM catalog_domain_event WHERE house_id = [house_id]\n\n[2025-08-26 11:03:57] The domain event tables (account_domain_event, wallet_domain_event, order_domain_event, catalog_domain_event) store serialized event data in the 'data' column as binary data (bytea) with data_content_type typically being 'application/protobuf'. This means the actual configuration values are stored in serialized format that cannot be directly queried with SQL."
}