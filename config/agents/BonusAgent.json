{
  "class": "CustomAgent",
  "description": "Specializes in bonus policies, awards, and redemptions. This agent can answer questions about bonus offerings, redemption rates, and bonus account statuses. Tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": "\nYou are BonusAgent, a specialized database agent focused on bonus policies and redemptions.\n\nYour expertise covers these tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on bonus offerings, redemption rates, and bonus account statuses",
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": "[2025-08-23 11:58:57] DATABASE SCHEMA INFORMATION:\n\n1. BONUS TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): Links to user account\n  - bonus_policy_id (bigint): Links to bonus_policy table\n  - account_path (varchar): Path in account hierarchy\n  - approval_required (boolean): If bonus needs approval\n  - award_amount (double precision): Bonus amount awarded\n  - award_date (timestamp with timezone): When bonus was awarded\n  - award_freq (varchar): Frequency of award\n  - bonus_type (varchar): Type of bonus\n  - bonus_status (varchar): Current status of bonus\n  - expiry_date (timestamp): When bonus expires\n  - installments (integer): Number of installments\n  - installments_given (integer): Installments already given\n  - redeem_amount (double precision): Amount redeemed\n  - redeem_date (timestamp): When redeemed\n  - turnover_met (numeric): Turnover requirements met\n  - turnover_required (double precision): Turnover requirements\n  - parent_id (bigint): Parent bonus ID for related bonuses\n  - deposit_amount (numeric): Associated deposit amount\n\n2. BONUS_POLICY TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - name (varchar): Policy name\n  - bonus_category (varchar): Category of bonus\n  - bonus_purpose (varchar): Purpose (default: ACQUISITION)\n  - start_date (timestamp): Policy start date\n  - end_date (timestamp): Policy end date\n  - is_active (boolean): If policy is active\n  - approval_required (boolean): If bonuses need approval\n  - expiry_duration_secs (bigint): How long until bonus expires\n  - limit_per_user (integer): Max bonuses per user\n  - max_users (bigint): Max users for this policy\n  - min_amount (double precision): Minimum amount\n  - sports_book (varchar): Associated sportsbook\n  - coupon_code (varchar): Associated coupon code\n  - bonus_policy_status (varchar): Status of policy\n  - availed_users_count (bigint): How many users used this policy\n\n3. BONUS_ACCOUNT TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - account_path (varchar): Path in account hierarchy\n  - username (varchar): User's username\n  - turnover (numeric): Total turnover\n  - referred_by (varchar): Who referred this account\n  - referral_count (bigint): Number of referrals\n  - completed_referrals (bigint): Completed referrals\n  - sports_book (varchar): Associated sportsbook\n  - create_time (timestamp): Creation time\n  - update_time (timestamp): Last update time\n\n4. REDEMPTION TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - bonus_entity_id (bigint): Links to bonus table\n  - amount (double precision): Amount redeemed\n  - redeem_date (timestamp): When redeemed\n  - redemption_status (varchar): Status of redemption\n  - turnover_snapshot (double precision): Turnover at redemption time\n  - notes (varchar): Additional notes\n\n5. DEPOSIT_TURNOVER TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - user_name (varchar): Username\n  - account_path (varchar): Path in account hierarchy\n  - deposit_amount (numeric): Amount deposited\n  - cashable_amount (numeric): Amount that can be cashed out\n  - turnover_snapshot (numeric): Turnover at deposit time\n  - turnover_required (numeric): Required turnover\n  - turnover_met (numeric): Turnover met so far\n  - transaction_id (varchar): Associated transaction ID\n  - status (varchar): Status of deposit turnover\n  - award_date (timestamp): When awarded\n  - redeem_date (timestamp): When redeemed\n\n6. TURNOVER_ENTRY TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - account_path (varchar): Path in account hierarchy\n  - username (varchar): Username\n  - amount (numeric): Turnover amount\n  - bets_count (integer): Number of bets\n  - transaction_type (varchar): Type of transaction\n  - turnover_after (numeric): Turnover after this entry\n  - create_time (timestamp): Creation time\n  - event_id (varchar): Associated event\n  - event_name (varchar): Name of event\n  - market_id (varchar): Associated market\n  - market_name (varchar): Name of market\n  - sport_id (varchar): Associated sport\n\nKEY RELATIONSHIPS:\n- bonus.bonus_policy_id → bonus_policy.id\n- bonus.id ← redemption.bonus_entity_id\n- bonus.account_id → bonus_account.account_id\n- deposit_turnover.account_id → bonus_account.account_id\n- turnover_entry.account_id → bonus_account.account_id\n\nThese tables work together to track:\n1. Bonus policies (rules for bonuses)\n2. Individual bonuses awarded to users\n3. User bonus accounts\n4. Redemption of bonuses\n5. Deposit turnover requirements\n6. Individual turnover entries that count toward requirements\n\n[2025-08-23 11:59:08] COMMON DATA RELATIONSHIPS AND QUERY PATTERNS:\n\n1. Finding bonuses for a specific user:\n   - JOIN bonus ON bonus_account using account_id\n   - Filter by bonus_account.username or bonus.account_id\n\n2. Getting bonus redemption details:\n   - JOIN bonus WITH redemption ON bonus.id = redemption.bonus_entity_id\n   - Useful for tracking which bonuses have been redeemed\n\n3. Checking turnover requirements:\n   - JOIN bonus WITH deposit_turnover ON bonus.account_id = deposit_turnover.account_id\n   - Compare turnover_met with turnover_required to see if requirements are met\n\n4. Tracking turnover progress:\n   - JOIN turnover_entry WITH bonus_account ON turnover_entry.account_id = bonus_account.account_id\n   - Aggregate turnover_entry.amount to calculate total turnover\n\n5. Bonus policy usage:\n   - JOIN bonus WITH bonus_policy ON bonus.bonus_policy_id = bonus_policy.id\n   - Count bonuses per policy to track usage\n\n6. Active bonus policies:\n   - Filter bonus_policy WHERE is_active = true AND current_timestamp BETWEEN start_date AND end_date\n\n7. Pending redemptions:\n   - Filter redemption WHERE redemption_status = 'PENDING'\n\n8. Expired bonuses:\n   - Filter bonus WHERE expiry_date < current_timestamp\n\n9. Referral tracking:\n   - Use bonus_account.referred_by and bonus_account.referral_count\n   - JOIN with bonus WHERE bonus_type = 'REFERRAL'\n\n10. Bonus status transitions:\n    - Track bonus.bonus_status changes over time\n\nCOMMON STATUS VALUES:\n- Bonus status: 'ACTIVE', 'PENDING', 'REDEEMED', 'EXPIRED', 'CANCELLED'\n- Redemption status: 'PENDING', 'COMPLETED', 'REJECTED'\n- Deposit turnover status: 'ACTIVE', 'COMPLETED', 'CANCELLED'\n\nAGGREGATION PATTERNS:\n- SUM(award_amount) by bonus_type, bonus_policy_id\n- COUNT(id) by bonus_status\n- AVG(turnover_required) by bonus_policy_id\n- SUM(amount) from turnover_entry grouped by account_id, date\n\n[2025-08-23 11:59:21] BUSINESS LOGIC INSIGHTS:\n\n1. Bonus Lifecycle:\n   - Creation: A bonus is created based on a bonus_policy\n   - Activation: The bonus becomes active and available for use\n   - Redemption: User redeems the bonus, creating redemption entries\n   - Completion: Bonus is fully redeemed or expires\n\n2. Turnover Requirements:\n   - Many bonuses require users to wager a certain amount (turnover) before withdrawing\n   - turnover_required field indicates the amount needed\n   - turnover_met tracks progress toward that requirement\n   - turnover_entry records individual betting activities that contribute to turnover\n\n3. Bonus Types:\n   - Deposit bonuses: Linked to user deposits (see deposit_amount)\n   - Referral bonuses: Given for referring new users\n   - Loyalty bonuses: Given to reward loyal customers\n   - Promotional bonuses: Given for specific promotions\n\n4. Installment Bonuses:\n   - Some bonuses are paid out in installments\n   - installments field indicates total number of payments\n   - installments_given tracks how many have been paid\n\n5. Approval Workflow:\n   - Some bonuses require approval (approval_required = true)\n   - These typically go through a status flow: PENDING → APPROVED → ACTIVE\n\n6. Bonus Policies:\n   - Define the rules and conditions for bonuses\n   - Can be limited by time (start_date, end_date)\n   - Can be limited by number of users (max_users)\n   - Can be limited per user (limit_per_user)\n   - Can require minimum deposit amounts (min_amount)\n\n7. Referral System:\n   - Users can refer others (referred_by in bonus_account)\n   - Referrers get bonuses when referred users complete certain actions\n   - completed_referrals tracks successful referrals\n\n8. Expiration Logic:\n   - Bonuses expire based on expiry_date\n   - Policies may define expiry_duration_secs (time from award to expiration)\n\n9. Redemption Process:\n   - Users redeem bonuses when certain conditions are met\n   - Redemptions may have different statuses (pending, completed, rejected)\n   - Redemption may be partial or complete\n\n10. Account Hierarchy:\n    - account_path represents position in organizational hierarchy\n    - Important for reporting and permissions\n\n[2025-08-23 13:13:30] The bonus type for deposit bonuses in the system is 'DEPOSIT_BONUS' rather than just 'DEPOSIT'.\n\n[2025-08-26 11:05:45] There are currently 4 active bonus policies in the system. Three of them are deposit bonuses (regular deposit, crypto deposit, and IMPS deposit) and one is a joining bonus. The deposit bonus policy has no bonuses awarded yet, while the joining bonus has been used by 3 users, crypto deposit bonus by 2 users, and IMPS deposit bonus by 12 users.\n\n[2025-08-26 11:06:11] The bonus statuses in the system are: AWARDED, AWARD_IN_PROGRESS, CANCELLED, EXPIRED, and REDEEMED. The \"ACTIVE\" status doesn't exist. \"AWARDED\" seems to be the status for bonuses that have been awarded but not yet redeemed."
}