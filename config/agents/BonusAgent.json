{
  "class": "CustomAgent",
  "description": "Specializes in bonus policies, awards, and redemptions. This agent can answer questions about bonus offerings, redemption rates, and bonus account statuses. Tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": [
    "",
    "You are BonusAgent, a specialized database agent focused on bonus policies and redemptions.",
    "",
    "Your expertise covers these tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry.",
    "",
    "Additional Instructions:",
    "- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.",
    "- Aggregate and summarize the results from all parallel tool calls before responding to the user.",
    "- If any tool call fails, report the error clearly but still return results from successful tool calls.",
    "- Only execute tool calls in parallel if they are independent and do not depend on each other's results.",
    "",
    "Instructions:",
    "- Only query the tables within your domain of expertise",
    "- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).",
    "- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.",
    "- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.",
    "- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.",
    "- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").",
    "- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.",
    "- Provide answers in clear, natural language unless the user explicitly requests otherwise.",
    "- Focus on bonus offerings, redemption rates, and bonus account statuses"
  ],
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": [
    "[2025-08-23 11:58:57] DATABASE SCHEMA INFORMATION:",
    "",
    "1. BONUS TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - account_id (bigint): Links to user account",
    "  - bonus_policy_id (bigint): Links to bonus_policy table",
    "  - account_path (varchar): Path in account hierarchy",
    "  - approval_required (boolean): If bonus needs approval",
    "  - award_amount (double precision): Bonus amount awarded",
    "  - award_date (timestamp with timezone): When bonus was awarded",
    "  - award_freq (varchar): Frequency of award",
    "  - bonus_type (varchar): Type of bonus",
    "  - bonus_status (varchar): Current status of bonus",
    "  - expiry_date (timestamp): When bonus expires",
    "  - installments (integer): Number of installments",
    "  - installments_given (integer): Installments already given",
    "  - redeem_amount (double precision): Amount redeemed",
    "  - redeem_date (timestamp): When redeemed",
    "  - turnover_met (numeric): Turnover requirements met",
    "  - turnover_required (double precision): Turnover requirements",
    "  - parent_id (bigint): Parent bonus ID for related bonuses",
    "  - deposit_amount (numeric): Associated deposit amount",
    "",
    "2. BONUS_POLICY TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - name (varchar): Policy name",
    "  - bonus_category (varchar): Category of bonus",
    "  - bonus_purpose (varchar): Purpose (default: ACQUISITION)",
    "  - start_date (timestamp): Policy start date",
    "  - end_date (timestamp): Policy end date",
    "  - is_active (boolean): If policy is active",
    "  - approval_required (boolean): If bonuses need approval",
    "  - expiry_duration_secs (bigint): How long until bonus expires",
    "  - limit_per_user (integer): Max bonuses per user",
    "  - max_users (bigint): Max users for this policy",
    "  - min_amount (double precision): Minimum amount",
    "  - sports_book (varchar): Associated sportsbook",
    "  - coupon_code (varchar): Associated coupon code",
    "  - bonus_policy_status (varchar): Status of policy",
    "  - availed_users_count (bigint): How many users used this policy",
    "",
    "3. BONUS_ACCOUNT TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - account_id (bigint): User account ID",
    "  - account_path (varchar): Path in account hierarchy",
    "  - username (varchar): User's username",
    "  - turnover (numeric): Total turnover",
    "  - referred_by (varchar): Who referred this account",
    "  - referral_count (bigint): Number of referrals",
    "  - completed_referrals (bigint): Completed referrals",
    "  - sports_book (varchar): Associated sportsbook",
    "  - create_time (timestamp): Creation time",
    "  - update_time (timestamp): Last update time",
    "",
    "4. REDEMPTION TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - bonus_entity_id (bigint): Links to bonus table",
    "  - amount (double precision): Amount redeemed",
    "  - redeem_date (timestamp): When redeemed",
    "  - redemption_status (varchar): Status of redemption",
    "  - turnover_snapshot (double precision): Turnover at redemption time",
    "  - notes (varchar): Additional notes",
    "",
    "5. DEPOSIT_TURNOVER TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - account_id (bigint): User account ID",
    "  - user_name (varchar): Username",
    "  - account_path (varchar): Path in account hierarchy",
    "  - deposit_amount (numeric): Amount deposited",
    "  - cashable_amount (numeric): Amount that can be cashed out",
    "  - turnover_snapshot (numeric): Turnover at deposit time",
    "  - turnover_required (numeric): Required turnover",
    "  - turnover_met (numeric): Turnover met so far",
    "  - transaction_id (varchar): Associated transaction ID",
    "  - status (varchar): Status of deposit turnover",
    "  - award_date (timestamp): When awarded",
    "  - redeem_date (timestamp): When redeemed",
    "",
    "6. TURNOVER_ENTRY TABLE:",
    "- Primary key: id (bigint)",
    "- Important columns:",
    "  - account_id (bigint): User account ID",
    "  - account_path (varchar): Path in account hierarchy",
    "  - username (varchar): Username",
    "  - amount (numeric): Turnover amount",
    "  - bets_count (integer): Number of bets",
    "  - transaction_type (varchar): Type of transaction",
    "  - turnover_after (numeric): Turnover after this entry",
    "  - create_time (timestamp): Creation time",
    "  - event_id (varchar): Associated event",
    "  - event_name (varchar): Name of event",
    "  - market_id (varchar): Associated market",
    "  - market_name (varchar): Name of market",
    "  - sport_id (varchar): Associated sport",
    "",
    "KEY RELATIONSHIPS:",
    "- bonus.bonus_policy_id → bonus_policy.id",
    "- bonus.id ← redemption.bonus_entity_id",
    "- bonus.account_id → bonus_account.account_id",
    "- deposit_turnover.account_id → bonus_account.account_id",
    "- turnover_entry.account_id → bonus_account.account_id",
    "",
    "These tables work together to track:",
    "1. Bonus policies (rules for bonuses)",
    "2. Individual bonuses awarded to users",
    "3. User bonus accounts",
    "4. Redemption of bonuses",
    "5. Deposit turnover requirements",
    "6. Individual turnover entries that count toward requirements",
    "",
    "[2025-08-23 11:59:08] COMMON DATA RELATIONSHIPS AND QUERY PATTERNS:",
    "",
    "1. Finding bonuses for a specific user:",
    "   - JOIN bonus ON bonus_account using account_id",
    "   - Filter by bonus_account.username or bonus.account_id",
    "",
    "2. Getting bonus redemption details:",
    "   - JOIN bonus WITH redemption ON bonus.id = redemption.bonus_entity_id",
    "   - Useful for tracking which bonuses have been redeemed",
    "",
    "3. Checking turnover requirements:",
    "   - JOIN bonus WITH deposit_turnover ON bonus.account_id = deposit_turnover.account_id",
    "   - Compare turnover_met with turnover_required to see if requirements are met",
    "",
    "4. Tracking turnover progress:",
    "   - JOIN turnover_entry WITH bonus_account ON turnover_entry.account_id = bonus_account.account_id",
    "   - Aggregate turnover_entry.amount to calculate total turnover",
    "",
    "5. Bonus policy usage:",
    "   - JOIN bonus WITH bonus_policy ON bonus.bonus_policy_id = bonus_policy.id",
    "   - Count bonuses per policy to track usage",
    "",
    "6. Active bonus policies:",
    "   - Filter bonus_policy WHERE is_active = true AND current_timestamp BETWEEN start_date AND end_date",
    "",
    "7. Pending redemptions:",
    "   - Filter redemption WHERE redemption_status = 'PENDING'",
    "",
    "8. Expired bonuses:",
    "   - Filter bonus WHERE expiry_date < current_timestamp",
    "",
    "9. Referral tracking:",
    "   - Use bonus_account.referred_by and bonus_account.referral_count",
    "   - JOIN with bonus WHERE bonus_type = 'REFERRAL'",
    "",
    "10. Bonus status transitions:",
    "    - Track bonus.bonus_status changes over time",
    "",
    "COMMON STATUS VALUES:",
    "- Bonus status: 'ACTIVE', 'PENDING', 'REDEEMED', 'EXPIRED', 'CANCELLED'",
    "- Redemption status: 'PENDING', 'COMPLETED', 'REJECTED'",
    "- Deposit turnover status: 'ACTIVE', 'COMPLETED', 'CANCELLED'",
    "",
    "AGGREGATION PATTERNS:",
    "- SUM(award_amount) by bonus_type, bonus_policy_id",
    "- COUNT(id) by bonus_status",
    "- AVG(turnover_required) by bonus_policy_id",
    "- SUM(amount) from turnover_entry grouped by account_id, date",
    "",
    "[2025-08-23 11:59:21] BUSINESS LOGIC INSIGHTS:",
    "",
    "1. Bonus Lifecycle:",
    "   - Creation: A bonus is created based on a bonus_policy",
    "   - Activation: The bonus becomes active and available for use",
    "   - Redemption: User redeems the bonus, creating redemption entries",
    "   - Completion: Bonus is fully redeemed or expires",
    "",
    "2. Turnover Requirements:",
    "   - Many bonuses require users to wager a certain amount (turnover) before withdrawing",
    "   - turnover_required field indicates the amount needed",
    "   - turnover_met tracks progress toward that requirement",
    "   - turnover_entry records individual betting activities that contribute to turnover",
    "",
    "3. Bonus Types:",
    "   - Deposit bonuses: Linked to user deposits (see deposit_amount)",
    "   - Referral bonuses: Given for referring new users",
    "   - Loyalty bonuses: Given to reward loyal customers",
    "   - Promotional bonuses: Given for specific promotions",
    "",
    "4. Installment Bonuses:",
    "   - Some bonuses are paid out in installments",
    "   - installments field indicates total number of payments",
    "   - installments_given tracks how many have been paid",
    "",
    "5. Approval Workflow:",
    "   - Some bonuses require approval (approval_required = true)",
    "   - These typically go through a status flow: PENDING → APPROVED → ACTIVE",
    "",
    "6. Bonus Policies:",
    "   - Define the rules and conditions for bonuses",
    "   - Can be limited by time (start_date, end_date)",
    "   - Can be limited by number of users (max_users)",
    "   - Can be limited per user (limit_per_user)",
    "   - Can require minimum deposit amounts (min_amount)",
    "",
    "7. Referral System:",
    "   - Users can refer others (referred_by in bonus_account)",
    "   - Referrers get bonuses when referred users complete certain actions",
    "   - completed_referrals tracks successful referrals",
    "",
    "8. Expiration Logic:",
    "   - Bonuses expire based on expiry_date",
    "   - Policies may define expiry_duration_secs (time from award to expiration)",
    "",
    "9. Redemption Process:",
    "   - Users redeem bonuses when certain conditions are met",
    "   - Redemptions may have different statuses (pending, completed, rejected)",
    "   - Redemption may be partial or complete",
    "",
    "10. Account Hierarchy:",
    "    - account_path represents position in organizational hierarchy",
    "    - Important for reporting and permissions",
    "",
    "[2025-08-23 13:13:30] The bonus type for deposit bonuses in the system is 'DEPOSIT_BONUS' rather than just 'DEPOSIT'.",
    "",
    "[2025-08-26 11:05:45] There are currently 4 active bonus policies in the system. Three of them are deposit bonuses (regular deposit, crypto deposit, and IMPS deposit) and one is a joining bonus. The deposit bonus policy has no bonuses awarded yet, while the joining bonus has been used by 3 users, crypto deposit bonus by 2 users, and IMPS deposit bonus by 12 users.",
    "",
    "[2025-08-26 11:06:11] The bonus statuses in the system are: AWARDED, AWARD_IN_PROGRESS, CANCELLED, EXPIRED, and REDEEMED. The \"ACTIVE\" status doesn't exist. \"AWARDED\" seems to be the status for bonuses that have been awarded but not yet redeemed."
  ]
}