{
  "class": "CustomAgent",
  "description": "agent to ask questions to postgres db directly.",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": [
    "You are AskDB, an intelligent agent with access to PostgreSQL database queries and specialized database agents.",
    "Your role is to answer user questions about the database in clear, natural language.",
    "",
    "Specialized Agents Available:",
    "- UserProfileAgent: User accounts, profiles, activity, self-exclusion settings",
    "- WalletAgent: Financial transactions, wallet operations, account transfers",
    "- BonusAgent: Bonus policies, awards, redemptions, turnover requirements",
    "- BettingAgent: Sports betting, customer orders, market exposures, sports books",
    "- CasinoAgent: Casino games, providers, categories",
    "- AffiliateAgent: Affiliate relationships, campaigns, commissions",
    "- ProfitLossAgent: Profit/loss metrics, daily house P&L, exposure logs",
    "- ConfigurationAgent: System configurations, whitelabel settings",
    "- NotificationAgent: System notifications, user communications",
    "- EventTrackingAgent: Domain events, system changes, database modifications",
    "",
    "These specialised agents have lot of details about schema of tables and how they are related to each other.",
    "You can ask schema from those agent, if required.",
    "",
    "Agent Selection Strategy:",
    "- ALWAYS prioritize using specialized agents over direct postgres_query as they have more context",
    "  and are fine-tuned for their specific table domains",
    "- Use specialized agents whenever the query relates to their domain expertise, even partially",
    "- You can use multiple specialized agents in parallel for complex queries spanning multiple domains",
    "- Only use direct postgres_query when:",
    "  * The query requires tables or data that span beyond any single agent's expertise",
    "  * You need to perform complex joins across multiple domains that specialized agents cannot handle",
    "  * The query involves tables not covered by any specialized agent",
    "- When in doubt, prefer delegating to the most relevant specialized agent rather than executing SQL directly",
    "",
    "Additional Instructions:",
    "- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups),",
    "  dispatch these tool calls in parallel whenever possible to minimize response time",
    "- Aggregate and summarize the results from all parallel tool calls before responding to the user",
    "- If any tool call fails, report the error clearly but still return results from successful tool calls",
    "- Only execute tool calls in parallel if they are independent and do not depend on each other's results",
    "",
    "Instructions:",
    "- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that",
    "  edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.)",
    "- Never fetch or return the entire database or very large datasets in a single response.",
    "  If a query could return a large amount of data, use intelligent pagination and inform the user",
    "  about the data size and how to request more if needed",
    "- Always prioritize concise, relevant answers. Summarize or aggregate results when possible",
    "  to avoid context overflow",
    "- If a user requests a restricted action (edit, delete, modify), politely refuse and explain",
    "  that only read-only access is permitted",
    "- When answering, provide clear explanations in natural language. Do NOT show SQL queries",
    "  unless the user explicitly asks for them (e.g., 'show SQL' or 'give me the query')",
    "- Do not ask users for query confirmation. Always infer the required details and generate",
    "  the answer directly",
    "- Provide answers in clear, natural language unless the user explicitly requests otherwise",
    "",
    "Your goal is to help users explore and understand the database.",
    "Your responses should help users explore and understand the database, while strictly following the above rules.",
    "You can explicitly say no to queries asking for things other than data exploration."
  ],
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": [
    "[2025-09-02 23:33:50] Table: account\nPrimary Key: id (bigint)\nKey Columns: \n- id: Primary key (bigint)\n- house_id: Links to house entity (bigint)\n- parent_id: For hierarchical relationships (bigint)\n- path: Account path in hierarchy (varchar)\n- affiliate_path: For affiliate tracking (varchar)\nImportant Columns:\n- mode: Account mode (0=Real, 1=Demo, 2=Test)\n- status: Account status (0=Active, 1=Suspended, 2=Closed, 3=Pending)\n- type: Account type (User, Admin, House-Admin, Global-Admin)\n- create_time: When account was created\n- is_b2b: Whether account is B2B\nRelationships:\n- Links to customer_order via account_id\n- Links to turnover_entry via account_id\n- Links to kpi_entity via account_id",
    "\n\n[2025-09-02 23:33:58] Table: bonus_policy\nPrimary Key: id (bigint)\nKey Columns:\n- id: Primary key (bigint)\n- name: Bonus policy name (varchar)\n- coupon_code: For redeeming bonus (varchar)\nImportant Columns:\n- bonus_category: Type of bonus (DEPOSIT_BONUS, SIGNUP_BONUS, REFERRAL_BONUS, SPECIAL_BONUS, LOSSBACK_BONUS, JOINING_BONUS)\n- bonus_purpose: Purpose of bonus (ACQUISITION, RETENTION)\n- bonus_policy_status: Current status of the policy\n- start_date/end_date: Validity period\n- expiry_duration_secs: How long bonus is valid after redemption\n- limit_per_user: Maximum times a user can use this bonus\n- max_users: Maximum number of users who can use this bonus\n- min_amount: Minimum amount required to qualify\n- approval_required: Whether manual approval is needed\n- bonus_settings: Serialized bonus configuration\nRelationships:\n- Can be linked to turnover requirements and bonus redemptions",
    "\n\n[2025-09-02 23:34:03] Table: kpi_entity\nPrimary Key: id (bigint)\nKey Columns:\n- id: Primary key (bigint)\n- account_id: Links to account (bigint)\n- reference_id: Reference to related entity (bigint)\nImportant Columns:\n- category: KPI category (SIGNUP, WITHDRAW, REFUND, DEPOSIT)\n- sub_category: More specific KPI classification\n- value: Numeric value of the KPI\n- create_time: When KPI was recorded\n- account_path: Path in account hierarchy\n- username: Associated username\nRelationships:\n- Links to account via account_id\n- May link to other entities via reference_id",
    "\n\n[2025-09-02 23:34:08] Table: turnover_entry\nPrimary Key: id (bigint)\nKey Columns:\n- id: Primary key (bigint)\n- account_id: Links to account (bigint)\n- username: Associated username\nImportant Columns:\n- amount: Turnover amount (numeric)\n- turnover_after: Cumulative turnover after this entry (numeric)\n- transaction_type: Type of transaction\n- category_type: Category of turnover\n- create_time: When entry was recorded\n- market details: event_id, event_name, market_id, market_name, market_type, sport_id\nRelationships:\n- Links to account via account_id\n- May link to customer_order via shared event/market IDs",
    "\n\n[2025-09-02 23:34:15] Table: customer_order\nPrimary Key: order_id (bigint)\nKey Columns:\n- order_id: Primary key (bigint)\n- account_id: Links to account (bigint)\n- username: Associated username\nImportant Columns:\n- placed_stake: Original stake amount (numeric)\n- matched_stake: Matched portion of stake (numeric)\n- cancelled_stake: Cancelled portion of stake (numeric)\n- placed_odd: Original odds (numeric)\n- matched_odd: Matched odds (numeric)\n- returns: Potential returns (numeric)\n- status: Order status (0=Pending, 1=Matched, 2=Settled, 3=Cancelled, 4=Void, 10=Rejected)\n- placed_time: When order was placed\n- event/market details: event_id, event_name, market_id, market_name, sport_id, competition_id\n- bonus_redeemed: Bonus amount used in this order\nRelationships:\n- Links to account via account_id\n- May link to turnover_entry via shared event/market IDs",
    "\n\n[2025-09-02 23:34:21] Table: gap_casino_games\nPrimary Key: id (bigint)\nKey Columns:\n- id: Primary key (bigint)\n- game_id: Unique game identifier (varchar)\n- game_code: Game code (varchar)\nImportant Columns:\n- game_name: Name of the casino game\n- category: Game category/type\n- provider_name: Game provider\n- sub_provider_name: Sub-provider if applicable\n- super_provider_name: Parent provider if applicable\n- state: Game state\n- status: Game status\n- enable: Whether game is enabled\n- trending: Whether game is marked as trending\n- bonus_enabled: Whether bonuses can be used with this game\n- priority: Display priority\n- tag: Game tag\nRelationships:\n- Links to house via house_id\n- May link to casino game transactions",
    "\n\n[2025-09-02 23:34:28] Table: daily_house_pl\nPrimary Key: id (bigint)\nKey Columns:\n- id: Primary key (bigint)\n- house_id: Links to house (bigint)\nImportant Columns:\n- start_date/end_date: Period covered by this P&L record\n- opening_balance: Balance at start of period (numeric)\n- closing_balance: Balance at end of period (numeric)\n- house_pl: House profit/loss for period (numeric)\n- total_house_pl: Cumulative house profit/loss (numeric)\n- user transactions: user_deposit, user_withdrawal, user_bonus, user_refund\n- payment gateway transactions: user_pg_deposit, user_pg_withdrawal\n- settlement transactions: user_settlement_deposit, user_settlement_withdrawal\n- win commission transactions: user_win_comm_deposit, user_win_comm_withdrawal\n- affiliate_bonus: Affiliate bonus amounts\nRelationships:\n- Links to house via house_id",
    "\n\n[2025-09-02 23:34:36] Key Table Relationships:\n\n1. Account-centric relationships:\n   - account → customer_order: via account_id\n   - account → turnover_entry: via account_id\n   - account → kpi_entity: via account_id\n   - Common fields: account_id, username, account_path\n\n2. House-centric relationships:\n   - house → account: via house_id\n   - house → gap_casino_games: via house_id\n   - house → daily_house_pl: via house_id\n   - Common field: house_id\n\n3. Betting-related relationships:\n   - customer_order ↔ turnover_entry: via shared event/market IDs\n   - Common fields: event_id, event_name, market_id, market_name, market_type, sport_id\n\n4. Bonus-related relationships:\n   - bonus_policy → bonus redemptions (not in provided tables)\n   - customer_order has bonus_redeemed field\n   \n5. KPI tracking:\n   - kpi_entity tracks various metrics (deposits, withdrawals, signups)\n   - daily_house_pl tracks aggregate financial metrics\n\nCommon ID patterns:\n- Primary keys are typically bigint columns named 'id' (or order_id for customer_order)\n- Foreign keys typically follow the pattern [table_name]_id\n- Path columns (account_path, affiliate_path) represent hierarchical relationships",
    "\n\n[2025-09-02 23:34:44] Important Status and Enum Values:\n\n1. account.status:\n   - 0: Active\n   - 1: Suspended\n   - 2: Closed\n   - 3: Pending\n\n2. account.mode:\n   - 0: Real\n   - 1: Demo\n   - 2: Test\n\n3. account.type:\n   - User: Regular user account\n   - Admin: Administrator account\n   - House-Admin: House administrator\n   - Global-Admin: Global administrator\n\n4. customer_order.status:\n   - 0: Pending\n   - 1: Matched\n   - 2: Settled\n   - 3: Cancelled\n   - 4: Void\n   - 10: Rejected\n\n5. bonus_policy.bonus_category:\n   - DEPOSIT_BONUS: Bonus on deposit\n   - SIGNUP_BONUS: Bonus for new signups\n   - REFERRAL_BONUS: Bonus for referrals\n   - SPECIAL_BONUS: Special promotional bonus\n   - LOSSBACK_BONUS: Bonus returning a portion of losses\n   - JOINING_BONUS: Bonus for joining\n\n6. bonus_policy.bonus_purpose:\n   - ACQUISITION: For acquiring new customers\n   - RETENTION: For retaining existing customers\n\n7. kpi_entity.category:\n   - SIGNUP: New user registrations\n   - WITHDRAW: User withdrawals\n   - REFUND: Refunds issued\n   - DEPOSIT: User deposits",
    "\n\n[2025-09-02 23:40:05] # Common Database Reporting Queries by Category\n\n## Bonus Related Queries\n1. Total bonus amount in time period:\n   ```sql\n   SELECT SUM(award_amount) FROM bonus WHERE award_date > :startDate AND award_date < :endDate;\n   ```\n\n2. New users achieving bonus tier:\n   ```sql\n   SELECT COUNT(a.id), SUM(b.redeem_amount) \n   FROM bonus b \n   JOIN account a ON b.account_id = a.id \n   WHERE a.create_time > :startDate AND b.bonus_status = 'REDEEMED';\n   ```\n\n3. Turnover and profit for specific bonus policy:\n   - First get policy ID: `SELECT id FROM bonus_policy bp WHERE bp.name = :bonusPolicyName;`\n   - Then query: `SELECT SUM(turnover_met) FROM bonus WHERE bonus_policy_id = :bonusPolicyId;`\n\n## User Related Queries\n1. Signups in last 24 hours:\n   ```sql\n   SELECT COUNT(DISTINCT account_id) AS total_signups \n   FROM kpi_entity \n   WHERE category = 'SIGNUP' AND create_time >= NOW() - INTERVAL '24 hours';\n   ```\n\n2. First Time Deposits (FTD) in last 24 hours:\n   ```sql\n   SELECT COUNT(DISTINCT account_id) AS total_ftd \n   FROM kpi_entity \n   WHERE category = 'DEPOSIT' AND sub_category = 'FIRST_DEPOSIT' \n   AND create_time >= NOW() - INTERVAL '24 hours';\n   ```\n\n3. Recurring deposits:\n   ```sql\n   SELECT COUNT(DISTINCT account_id) AS recurring_deposit_users \n   FROM kpi_entity \n   WHERE category = 'DEPOSIT' AND sub_category = 'OTHERS' AND create_time > :startDate;\n   ```\n\n4. Recurring users by event:\n   ```sql\n   SELECT te.event_id, COUNT(DISTINCT te.account_id) AS recurring_users_played\n   FROM turnover_entry te\n   JOIN kpi_entity ke ON te.account_id = ke.account_id\n   WHERE te.create_time::date = CURRENT_DATE\n   AND ke.category = 'DEPOSIT'\n   AND ke.sub_category <> 'FIRST_DEPOSIT'\n   AND ke.create_time::date = CURRENT_DATE\n   GROUP BY te.event_id\n   ORDER BY recurring_users_played DESC;\n   ```\n\n5. User turnover on specific event:\n   ```sql\n   SELECT SUM(amount) FROM turnover_entry \n   WHERE event_name = :eventName AND username = :username;\n   ```\n\n## Game Related Queries\n1. Turnover by category:\n   ```sql\n   SELECT SUM(amount) FROM turnover_entry te \n   WHERE te.category_type = :category \n   AND create_time > :startDate AND te.create_time < :endDate;\n   ```\n\n2. Profit by category:\n   ```sql\n   SELECT SUM(te.returns - te.matched_stake) \n   FROM customer_order te \n   WHERE te.category_type = :category \n   AND te.update_time > :startDate AND te.update_time < :endDate;\n   ```\n\n3. Profit for casino game:\n   ```sql\n   SELECT SUM(te.returns - te.matched_stake) \n   FROM customer_order te \n   WHERE te.event_id = :eventId AND te.update_time > :startDate;\n   ```\n\n4. Users who played specific game:\n   ```sql\n   SELECT COUNT(DISTINCT(account_id)) \n   FROM customer_order co \n   WHERE co.event_id = :eventId AND co.placed_time > :startDate;\n   ```\n\n5. Most profitable game:\n   ```sql\n   SELECT co.event_id, event_name, COUNT(DISTINCT(co.account_id)), \n   SUM(co.returns - co.matched_stake) \n   FROM customer_order co \n   WHERE co.placed_time > :startDate \n   GROUP BY event_id, event_name \n   ORDER BY SUM(returns - co.matched_stake) LIMIT 1;\n   ```\n\n## P&L Related Queries\n1. Overall P&L data is stored in daily_house_pl table with metrics:\n   - Deposits = userDeposit + userSettlementDeposit + userPgDeposit + userRefund\n   - Withdrawals = userWithdrawal + userSettlementWithdrawal + userPgWithdrawal\n   - Turnover from turnover_entry\n   - Bonus = user_bonus\n   - Affiliate bonus = affiliate_bonus\n   - Final P&L = house_pl - bonus - affiliate_bonus\n\n2. FTD amount:\n   ```sql\n   SELECT SUM(value) AS total_ftd_amount \n   FROM kpi_entity \n   WHERE category = 'DEPOSIT' AND sub_category = 'FIRST_DEPOSIT' \n   AND create_time >= NOW() - INTERVAL '24 hours';\n   ```\n\n3. Recurring deposit amount:\n   ```sql\n   SELECT SUM(value) AS total_amount \n   FROM kpi_entity \n   WHERE category = 'DEPOSIT' AND sub_category = 'OTHERS' \n   AND create_time >= NOW() - INTERVAL '24 hours';\n   ```\n\n4. User P&L for specific time period:\n   ```sql\n   SELECT SUM(te.returns - te.matched_stake) \n   FROM customer_order te \n   WHERE te.account_id = :accountId \n   AND te.update_time > :startDate AND te.update_time < :endDate;\n   ```\n\n5. User P&L by event:\n   ```sql\n   SELECT event_id, event_name, SUM(te.returns - te.matched_stake) \n   FROM customer_order te \n   WHERE te.account_id = :accountId \n   AND te.update_time > :startDate AND te.update_time < :endDate \n   GROUP BY event_id, event_name;\n   ```\n\n## Key Data Relationships and Notes\n1. customer_order table has monthly partitions with only last 3 months of data available\n2. For casino games, event_id in customer_order corresponds to game_id in gap_casino_games\n3. kpi_entity tracks key user events with categories: SIGNUP, DEPOSIT, WITHDRAW, REFUND\n4. DEPOSIT subcategories: FIRST_DEPOSIT, OTHERS\n5. turnover_entry records all betting activity\n6. daily_house_pl provides aggregated daily P&L metrics\n7. bonus and bonus_policy tables track bonus programs and redemptions",
    "\n\n[2025-09-02 23:43:06] KPI Entity Table Details:\n- Purpose: Tracks key performance indicators for accounts across different sportsbook white-labels\n- Categories: DEPOSIT, WITHDRAW, SIGNUP, REFUND\n- SubCategories: FIRST_DEPOSIT, OTHERS\n- Important fields: reference_id (links to transactions), sports_book (white-label brand), create_time (critical for time-based analytics)\n- DEPOSIT with FIRST_DEPOSIT subcategory indicates user's first deposit (important for bonus triggers)\n- SIGNUP KPIs typically have the new account's ID in reference_id with zero value\n- WITHDRAW and REFUND always have monetary values\n\nTurnover Entry Details:\n- Purpose: Records user turnover when bets/markets are settled across different categories\n- Categories: SPORTS, PREMIUM, SPORTS_BOOK, CASINO\n- Key flow: Settlement → Turnover Entry → Bonus Application\n- Turnover application to bonuses follows FIFO by award time\n- Turnover is applied to one bonus at a time until turnover_required is met\n- When turnover_met reaches turnover_required, bonus status changes to REDEEMED\n- Turnover definition varies by category:\n  * Casino/Premium: Stake amount of settled bets\n  * Sports/Sportsbook: Net market risk at market-level settlement\n- Required turnover formula: award_amount × multiplier\n\nTable Relationships:\n- kpi_entity and turnover_entry relate by user through account_id or account_path\n- account_id is the preferred joining key (more precise)\n- account_path can be used for hierarchical joins (e.g., all users under an agent)\n- Tenant scoping: kpi_entity.sports_book vs turnover_entry.house_id\n- Both tables have many-to-many relationship via the user",
    "\n\n[2025-09-02 23:48:07] Additional customer_order table details:\n\n1. Key columns and their meanings:\n   - order_id: Unique order identifier\n   - category_type: Order category (0=Sports, 1=Premium, 2=Sportsbook, 4=Casino)\n   - market_type: Type of market (0=Sports Match Odds, 3=Premium/Sportsbook, 4=Casino)\n   - Financial columns: placed_stake, placed_odd, matched_stake, matched_odd, remaining_stake, cancelled_stake, returns (payout including stake)\n   - Status columns: status, sub_status\n   - Timing columns: placed_time, initiated_time, update_time\n\n2. Profit calculation formula:\n   - Profit = matched_stake - returns\n   - Positive value means house profit, negative means player profit\n   - Only use settled bets (Won, Lost) for profit/loss calculations\n\n3. Category-specific rules:\n   - Casino (category_type=4): sport_name=CASINO, event_id=sport_id=game_id, market_type=4\n   - Sports (category_type=0): sport_id mapped via sports mapping, market_type=0\n   - Premium (category_type=1): Uses Sportradar-style IDs, market_type=3\n   - Sportsbook (category_type=2): Similar to Premium but with real/virtual sports, market_type=3\n\n4. Common reporting scenarios:\n   - For turnover: Use turnover_entry table (grouped by sport/category/event)\n   - For profit: Use customer_order table (matched_stake - returns)\n   - For casino game profit: Filter by category_type=4, specific event_id/game_id\n   - For user engagement: Count unique account_id per event_id\n   - For most played games: Group by event_id, count unique account_id\n\nThis information helps answer queries about game profitability, user engagement, and financial performance across different game categories."
  ]
}