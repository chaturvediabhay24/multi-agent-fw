{
  "class": "CustomAgent",
  "description": "Handles financial transactions, wallet operations, and account transfers. This agent can answer questions about wallet balances, transaction history, and banking operations. Tables: wallet, wallet_domain_event, wallet_transaction, wallet_transaction_log, wallet_last_transaction, account_transfer_record, banking_transaction",
  "model_type": "bedrock",
  "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
  "system_prompt": "\nYou are WalletAgent, a specialized database agent focused on financial transactions and wallet operations.\n\nYour expertise covers these tables: wallet, wallet_domain_event, wallet_transaction, wallet_transaction_log, wallet_last_transaction, account_transfer_record, banking_transaction.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on wallet balances, transaction history, and banking operations",
  "tools": [
    "postgres_query",
    "append_memory"
  ],
  "parallel_tools": true,
  "max_parallel_tools": 3,
  "memory": "[2025-08-23 11:58:17] Database Tables Structure:\n\n1. wallet\nPrimary key: id (bigint)\nKey columns: account_id, user_id (implied relationship)\nMain columns: \n- id: bigint (PK)\n- account_id: bigint\n- balance: numeric (default 0.00)\n- bonus: numeric (default 0.00)\n- exposure: numeric (default 0.00)\n- credit_reference: numeric (default 0.00)\n- max_credit_reference: numeric (default 0.00)\n- transfer_locked: boolean (default false)\n- house_id: bigint\n- currency_type: integer\n- account_path: character varying\n- non_cashable_amount: numeric (default 0)\n- redeemed_bonus: numeric (default 0)\n\n2. wallet_transaction\nPrimary key: id (bigint)\nKey columns: user_id, ref_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint (default -1)\n- amount: numeric (default 0.00)\n- balance_before: numeric (default 0.00)\n- balance_after: numeric (default 0.00)\n- transaction_type: integer\n- transaction_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- transaction_group: character varying (default 'UNKNOWN')\n- reference_id: character varying\n- request_id: character varying\n- initiated_by: bigint\n- remarks: character varying\n- house_id: bigint\n- account_path: character varying\n- bet_id: character varying\n- market_id: character varying\n- event_id: character varying\n- bonus_redeemed: numeric (default 0)\n- bonus_settled: numeric (default 0)\n- aff_comm_settled: numeric (default 0)\n- aff_comm_redeemed: numeric (default 0)\n\n3. wallet_transaction_log\nPrimary key: id (bigint)\nKey columns: user_id, from_user_id, to_user_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint (default -1)\n- from_user_id: bigint (default -1)\n- to_user_id: bigint (default -1)\n- transaction_type: integer\n- transaction_group: character varying (default 'UNKNOWN')\n- create_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- reference_id: character varying\n- request_id: character varying\n- balance: numeric (default 0.00)\n- exposure: numeric (default 0.00)\n- remarks: character varying\n- house_id: bigint\n- account_path: character varying\n- bonus_redeemed: numeric (default 0)\n- bonus_settled: numeric (default 0)\n- aff_comm_settled: numeric (default 0)\n- aff_comm_redeemed: numeric (default 0)\n\n4. wallet_last_transaction\nPrimary key: id (bigint)\nKey columns: user_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint\n- last_updated_balance: numeric (default 0.00)\n- request_id: character varying\n- update_time: timestamp without time zone\n\n5. wallet_domain_event\nPrimary key: id (bigint)\nMain columns:\n- id: bigint (PK)\n- type: character varying\n- time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- source: character varying\n- data: bytea\n- data_content_type: character varying\n\n6. account_transfer_record\nPrimary key: id (bigint)\nKey columns: account_id, transfer_id\nMain columns:\n- id: bigint (PK)\n- transfer_id: character varying\n- username: character varying\n- account_id: bigint\n- balance: numeric (default 0.00)\n- new_parent: character varying\n- old_parent: character varying\n- transferred_by: character varying\n- transfer_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- notes: character varying\n\n7. banking_transaction\nPrimary key: id (bigint)\nKey columns: username\nMain columns:\n- id: bigint (PK)\n- username: character varying\n- amount: double precision\n- deposit: boolean (default false)\n- transactions_type: integer\n- transaction_status_type: integer\n- create_time: timestamp without time zone\n- update_time: timestamp without time zone\n- reference_transaction: character varying\n- accepted_by: character varying\n- account_number: character varying\n- beneficiary_name: character varying\n- ifsccode: character varying\n- phone: character varying\n- upi: character varying\n\nTable Relationships (implied by column names):\n1. wallet.account_id relates to account/user tables\n2. wallet_transaction.user_id relates to users and wallet.account_id\n3. wallet_transaction_log.user_id relates to users and wallet.account_id\n4. wallet_last_transaction.user_id relates to users and wallet.account_id\n5. account_transfer_record.account_id relates to wallet.account_id\n6. banking_transaction.username relates to account usernames\n\nCommon Join Conditions:\n- wallet and wallet_transaction: wallet.account_id = wallet_transaction.user_id\n- wallet and wallet_transaction_log: wallet.account_id = wallet_transaction_log.user_id\n- wallet and wallet_last_transaction: wallet.account_id = wallet_last_transaction.user_id\n- wallet_transaction and wallet_transaction_log: wallet_transaction.user_id = wallet_transaction_log.user_id AND wallet_transaction.request_id = wallet_transaction_log.request_id\n- wallet and account_transfer_record: wallet.account_id = account_transfer_record.account_id\n- banking_transaction can be linked to other tables via username which likely corresponds to a user identifier in other tables\n\nTransaction Types:\nThe wallet_transaction and wallet_transaction_log tables have transaction_type and transaction_group columns that categorize different types of financial operations.\n\n[2025-08-23 11:59:24] Transaction Types and Groups:\n\nThe wallet system uses transaction_type (integer) and transaction_group (character varying) to categorize financial operations:\n\n1. FUND_TRANSFER group:\n   - Type 0: Likely deposit/credit\n   - Type 1: Likely withdrawal/debit\n   - Type 2: Likely transfer between accounts\n   - Type 3: Likely another transfer type\n   - Type 43, 44, 45: Additional fund transfer types\n   - Type 47, 48, 49: Additional fund transfer types\n   - Type 52, 53: Additional fund transfer types\n\n2. EXCHANGE group:\n   - Type 7: Exchange transaction\n   - Type 27: Possibly betting/wagering\n\n3. SAP_EXCHANGE group:\n   - Type 7, 27, 28: Likely betting/wagering operations\n   - Type 42, 50, 51: Additional exchange operations\n\n4. SPORTS_BOOK group:\n   - Type 7, 28: Likely sports betting\n   - Type 37, 38: Additional sports betting operations\n\n5. PREMIUM group:\n   - Type 11, 12: Premium service operations\n   - Type 27, 28, 29: Possibly premium betting operations\n\n6. CASINO group:\n   - Type 19, 20, 21: Casino gaming operations\n\nThese transaction types and groups help categorize different financial operations in the wallet system and can be used to filter and analyze specific types of transactions.\n\n[2025-08-23 13:14:02] In the wallet system, deposits appear to be recorded in the wallet_transaction table with transaction_group = 'FUND_TRANSFER' and transaction_type = 0, rather than in the banking_transaction table which has no deposit records."
}