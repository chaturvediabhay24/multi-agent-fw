{
  "askdb": {
    "class": "CustomAgent",
    "description": "agent to ask questions to postgres db directly.",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are AskDB, an intelligent agent with access to a tool for executing PostgreSQL database queries. Your role is to answer user questions about the database in clear, natural language.\n\nAdditional Instructions:\n- If you find new information during a conversation (such as new facts about the database, schema, or data), update your memory with that information so you can answer similar queries more quickly in the future.\n- When a conversation starts, load your memory with details about the database and its schema to be aware of the structure and content before answering questions.\n\nInstructions:\n\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n\n\nYour goal is to help users explore and understand the database.\n\nYour responses should help users explore and understand bonus policies and awarded bonuses, while strictly following the above rules.",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "# Database Schema Information\n\n## Core Tables\n\n### 1. bonus\n- **Purpose**: Tracks individual bonus awards and redemptions\n- **Key Fields**:\n  - `id`: Primary identifier\n  - `account_id`: User account ID\n  - `bonus_type`: Type (DEPOSIT_BONUS, JOINING_BONUS, LOSSBACK_BONUS, REFERRAL_BONUS, SIGNUP_BONUS, SPECIAL_BONUS)\n  - `bonus_status`: Status (AWARDED, AWARD_IN_PROGRESS, CANCELLED, EXPIRED, REDEEMED)\n  - `award_amount`: Amount awarded\n  - `turnover_met`: Current turnover progress\n  - `turnover_required`: Turnover requirement for redemption\n  - `bonus_policy_id`: Reference to bonus policy\n\n### 2. bonus_policy\n- **Purpose**: Defines bonus rules and configurations\n- **Key Fields**:\n  - `id`: Primary identifier\n  - `bonus_category`: Category (DEPOSIT_BONUS, SPECIAL_BONUS, SIGNUP_BONUS, REFERRAL_BONUS, LOSSBACK_BONUS, JOINING_BONUS)\n  - `bonus_purpose`: Purpose (ACQUISITION, RETENTION)\n  - `bonus_policy_status`: Status (INACTIVE, ACTIVE)\n  - `expiry_duration_secs`: Bonus validity period\n  - `limit_per_user`: Maximum bonuses per user\n\n### 3. customer_order\n- **Purpose**: Records all betting orders across different categories\n- **Key Fields**:\n  - `order_id`: Primary identifier\n  - `account_id`: User identifier\n  - `category_type`: Category (0=Sports, 1=Premium, 2=Sportsbook, 3=Casino)\n  - `market_type`: Market type (0=MATCH_ODDS, 3=PREMIUM, 4=CASINO)\n  - `status`: Order status (0-4, 10)\n  - `matched_stake`: Amount bet\n  - `returns`: Total payout to player\n  - `event_id`: Event/game identifier\n  - `provider_id`: Provider identifier\n\n### 4. turnover_entry\n- **Purpose**: Records user turnover when bets/markets are settled\n- **Key Fields**:\n  - `id`: Primary identifier\n  - `account_id`: User account ID\n  - `category_type`: Category (0=Sports, 1=Premium, 2=Sportsbook, 3=Casino)\n  - `transaction_type`: Type (GAP_BET_SETTLEMENT, SAP_BET_SETTLEMENT, SPORT_BOOK_BET_SETTLEMENT, etc.)\n  - `amount`: Turnover amount\n  - `turnover_after`: Accumulated turnover after this entry\n\n### 5. kpi_entity\n- **Purpose**: Stores KPI events for accounts across different sportsbooks\n- **Key Fields**:\n  - `id`: Primary identifier\n  - `account_id`: User account ID\n  - `category`: KPI category (DEPOSIT, WITHDRAW, SIGNUP, REFUND)\n  - `sub_category`: Sub-category (FIRST_DEPOSIT, OTHERS)\n  - `value`: Monetary or count value\n  - `sports_book`: Associated sportsbook\n\n## Key Relationships and Workflows\n\n### Bonus Processing Flow\n1. User places bets → Orders recorded in `customer_order`\n2. Settlement occurs → Turnover recorded in `turnover_entry`\n3. Turnover applied to active bonuses (FIFO by award time)\n4. When `bonus.turnover_met` reaches `bonus.turnover_required`, bonus status changes to REDEEMED\n\n### KPI Tracking\n- `kpi_entity` tracks business KPIs (deposits, withdrawals, signups, refunds)\n- `turnover_entry` tracks wagering/settlement activity\n- They relate through `account_id` and `account_path`\n\n### Profit Calculation\n- House profit calculation: SUM(matched_stake - returns) from `customer_order`\n- Positive value = house profit, negative = player profit\n- Only settled bets should be used for P&L calculation\n\n### Turnover Definition\n- Casino/Premium: Stake amount of settled bets\n- Sports/Sportsbook: Net market risk at market-level settlement\n- Exclusions: voided/canceled bets or ineligible settlements\n\n## Common Query Patterns\n- Casino game profitability: Filter `customer_order` by category_type=3, specific event_id\n- User activity: Count distinct account_id in `customer_order` for specific games/events\n- Popular games: Group `customer_order` by event_id/event_name, count distinct account_id\n- Sports summary: Group `customer_order` by sport_id, calculate P&L"
  }
}