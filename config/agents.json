{
  "askdb": {
    "class": "CustomAgent",
    "description": "agent to ask questions to postgres db directly.",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are AskDB, an intelligent agent with access to a tool for executing PostgreSQL database queries. Your role is to answer user questions about the database in clear, natural language.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n\n\nYour goal is to help users explore and understand the database.\n\nYour responses should help users explore and understand bonus policies and awarded bonuses, while strictly following the above rules.",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-19 17:33:10] Database Structure Information:\n\n1. BONUS TABLE:\n- Primary key: id (bigint)\n- Key columns: account_id, bonus_policy_id, bonus_type, bonus_status, award_amount, redeem_amount, turnover_required\n- Contains information about individual bonus awards given to users\n- bonus_type values: DEPOSIT_BONUS, JOINING_BONUS, LOSSBACK_BONUS, REFERRAL_BONUS, SIGNUP_BONUS, SPECIAL_BONUS\n- bonus_status values: AWARDED, AWARD_IN_PROGRESS, CANCELLED, EXPIRED, REDEEMED\n- award_freq values: DAILY, NULL\n- Tracks turnover requirements with columns: turnover_required, turnover_met, turnover_snapshot\n- Related to bonus_policy table via bonus_policy_id column\n\n2. BONUS_POLICY TABLE:\n- Primary key: id (bigint)\n- Key columns: bonus_category, bonus_purpose, name, start_date, end_date, is_active, max_users, limit_per_user\n- Contains configurations for different bonus policies/campaigns\n- bonus_category values: DEPOSIT_BONUS, LOSSBACK_BONUS, REFERRAL_BONUS, SIGNUP_BONUS, JOINING_BONUS, SPECIAL_BONUS\n- bonus_purpose values: ACQUISITION, RETENTION\n- Policies have time constraints with start_date and end_date\n- Can limit usage with max_users and limit_per_user\n\n3. CUSTOMER_ORDER TABLE:\n- Primary key: order_id (bigint)\n- Key columns: account_id, username, placed_time, status, placed_stake, matched_stake, returns\n- Contains betting orders/transactions\n- Has detailed event information: sport_id, competition_id, event_id, market_id, outcome_id\n- Includes financial details: placed_stake, matched_stake, cancelled_stake, returns, bonus_redeemed\n- Tracks odds with: placed_odd, matched_odd, odd_before, odd_after\n\n4. TURNOVER_ENTRY TABLE:\n- Primary key: id (bigint)\n- Key columns: account_id, username, amount, transaction_type, turnover_after\n- Tracks turnover progress for users\n- transaction_type values: GAP_BET_ROLLBACK, GAP_BET_SETTLEMENT, SAP_BET_ROLLBACK, SAP_BET_SETTLEMENT, SAP_BET_VOID, SPORT_BOOK_BET_ROLLBACK, SPORT_BOOK_BET_SETTLEMENT, VOID_BET_SETTLEMENT\n- Related to bonus table via account_id (users need to meet turnover requirements to redeem bonuses)\n\n5. KPI_ENTITY TABLE:\n- Primary key: id (bigint)\n- Key columns: category, sub_category, value, account_id, username\n- Tracks various KPIs for accounts\n- category values: REFUND, WITHDRAW, DEPOSIT, SIGNUP\n- sub_category values: OTHERS, FIRST_DEPOSIT\n\nRelationships:\n- bonus.bonus_policy_id relates to bonus_policy.id\n- bonus.account_id relates to turnover_entry.account_id (for tracking turnover requirements)\n- Both bonus and turnover_entry tables have username and account_id columns that can be used to join them\n- customer_order may relate to turnover_entry via account_id and username for tracking betting activity\n\nThis database appears to be for a betting/gaming platform that manages various types of bonuses, tracks user betting activity, monitors turnover requirements for bonus redemption, and measures KPIs.\n\n[2025-08-19 17:34:35] KPI Entity Table (kpi_entity) Detailed Documentation:\n- Purpose: Tracks KPI events for accounts across different sportsbook white-labels\n- Key categories: DEPOSIT, WITHDRAW, SIGNUP, REFUND\n- Sub-categories: FIRST_DEPOSIT (special tracking for first deposits), OTHERS\n- Important columns:\n  * reference_id: Links to transaction or account records\n  * sports_book: Links to white-label sportsbook brands\n  * create_time: Critical for time-based analytics\n  * value: Monetary value for transactions (important for WITHDRAW and REFUND)\n- Usage notes:\n  * FIRST_DEPOSIT is specifically used for first deposit bonuses and onboarding metrics\n  * SIGNUP KPIs typically have zero value with account ID in reference_id\n\nTurnover Entry Table (turnover_entry) Detailed Documentation:\n- Purpose: System of record for wagering volume used by reporting, VIP, and bonus redemption\n- Records user turnover at bet/market settlement across different categories\n- OrderCategory enum: SPORTS, PREMIUM, SPORTS_BOOK, CASINO\n- Critical for bonus progression tracking\n- Process flow for turnover to bonus:\n  1. When a bet settles, a turnover entry is created\n  2. System selects eligible bonuses (FIFO by award time)\n  3. Applies turnover to a single bonus at a time\n  4. When turnover_met reaches turnover_required, bonus is REDEEMED\n  5. Any remainder may be applied to next eligible bonus (implementation-specific)\n- Turnover definition varies by category:\n  * Casino/Premium: stake amount of settled bets\n  * Sports/Sportsbook: net market risk at market-level settlement\n- For bonus redemption: required_turnover = award_amount \u00d7 multiplier\n\nRelationship between kpi_entity and turnover_entry:\n- Both capture per-user activity at different layers\n- Can be joined by account_id (preferred) or account_path\n- account_path can be used for hierarchy rollups (agent/SDM/upline)\n- Tenant scoping considerations: sports_book vs house_id\n- One user has many KPI events and turnover entries (many-to-many via user)\n\n[2025-08-19 17:34:44] Bonus Redemption Process:\n1. Bonuses start in AWARDED status with turnover_met at 0\n2. As user places and settles bets, turnover_entry records are created\n3. Turnover is applied to bonuses in FIFO order (oldest first)\n4. When turnover_met reaches turnover_required, the bonus status changes to REDEEMED\n5. Upon redemption, funds transfer from bonus balance to main balance\n6. Redemption must occur before bonus expiry\n\nExample Bonus Progression:\n- Bonus A: turnover_required = 500, turnover_met = 400, status AWARDED\n- Bonus B: turnover_required = 1000, turnover_met = 0, status AWARDED\n- When a 100 INR bet settles:\n  * New turnover_entry with amount = 100\n  * Applied to Bonus A (FIFO rule)\n  * Bonus A turnover_met becomes 500\n  * Bonus A transitions to REDEEMED\n  * Funds move to main wallet\n  * Bonus B remains unchanged until next settlement\n\nTurnover entries are critical for:\n- Bonus redemption tracking\n- Wagering volume analytics\n- VIP program qualification\n- Regulatory reporting\n\n[2025-08-19 17:37:00] Customer Order Table - Detailed Information\n\n1. Profit Calculation Formula:\n   - Profit = SUM(matched_stake - returns)\n   - Positive value indicates house profit, negative means player profit\n   - Only settled bets should be used for profit/loss calculation\n\n2. Customer Order Categories:\n\n   a) Casino Category:\n   - category_type: 4\n   - sport_name: CASINO\n   - sport_id: Same as event_id (represents game ID of the casino game)\n   - competition_id: Provider of the casino game\n   - competition_name: Sub-provider name\n   - event_id: Same as sport_id\n   - event_name: Casino game name\n   - market_id: Round ID of the casino game\n   - market_type: 4 (CASINO)\n   - providerCorrelationId: Present (bet ID at provider)\n\n   b) Sports Category:\n   - category_type: 0\n   - sport_name: Lowercase sport name\n   - sport_id: Mapped via sports mapping table (e.g., cricket \u2192 4, soccer \u2192 1)\n   - competition_id/competition_name: League or tournament info\n   - event_id/event_name: Match details\n   - market_id/market_name: Market within the event (e.g., Match Odds)\n   - market_type: 0 (MATCH_ODDS)\n   - providerCorrelationId: Usually empty for sports\n\n   c) Premium Category:\n   - category_type: 1\n   - sport_name: Sportradar style ID (e.g., sr:sport:21) mapped to readable sport name\n   - sport_id: Sportradar sport ID\n   - competition_id/competition_name: Tournament name\n   - event_id/event_name: Match details\n   - market_id/market_name: Custom market description\n   - market_type: 3 (PREMIUM)\n   - providerCorrelationId: Present (bet ID at provider)\n\n   d) Sportsbook Category:\n   - category_type: 2\n   - sport_name: Readable sport name (e.g., Cricket)\n   - sport_id: Sportradar style ID (e.g., sr:sport:21)\n   - competition_id/competition_name: Virtual or real sports competition\n   - event_id/event_name: Match details\n   - market_id/market_name: Market details\n   - market_type: 3 (PREMIUM) \u2014 match odds format\n   - providerCorrelationId: Present (bet ID at provider)\n\n3. Key Mapping Rules:\n   - sport_id mapping:\n     * Casino: same as event_id\n     * Sports: from lowercase sport name via sports mapping table\n     * Premium/Sportsbook: Sportradar style (sr:sport:X) mapped to readable name\n   - market_type:\n     * 0 \u2192 MATCH_ODDS (sports only)\n     * 3 \u2192 PREMIUM (premium + sportsbook)\n     * 4 \u2192 CASINO (casino only)\n   - providerCorrelationId:\n     * Present for Casino, Premium, Sportsbook\n     * Usually empty for Sports\n\n4. Common Analysis Queries:\n   a) Turnover and profit by sports/category/event:\n      - For turnover: Use turnover_entry table, group by category/sports/event\n      - For profit: Use customer_order table, calculate profit as matched_stake - returns\n\n   b) Profit for a specific casino game in last 24 hours:\n      - Filter by category_type = 4 (Casino)\n      - Filter by event_id for specific game\n      - Filter by update_time for last 24 hours\n      - Calculate profit = matched_stake - returns\n      - Only include settled bets (check status)\n\n   c) User count for a specific game:\n      - Filter by event_id\n      - Count distinct account_id\n\n   d) Most played game in last 24 hours:\n      - Group by event_id and event_name\n      - Count distinct account_id\n      - Order by count descending\n\n   e) Top sports summary:\n      - Group by sport\n      - Show top 5 events by profit/loss\n      - Show top 5 games by profit/loss\n\n   f) First-time deposit vs recurring deposit analysis:\n      - Use KPI entity table\n      - For FTD: Filter by category=DEPOSIT, subcategory=FIRST_DEPOSIT\n      - For recurring: Filter by category=DEPOSIT, subcategory=OTHERS\n\n[2025-08-19 17:41:29] To answer \"how many people signed up this month\" questions:\n1. The user signup information is stored in the user_profile table\n2. The user_profile table has a create_time field that indicates when users signed up\n3. To get monthly signups, use a query like: SELECT COUNT(*) FROM user_profile WHERE create_time >= DATE_TRUNC('month', CURRENT_DATE) AND create_time < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'\n4. This query counts all records where create_time is within the current month\n5. For questions about user signups or registrations, always check the user_profile table first"
  }
}