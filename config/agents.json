{
  "askdb": {
    "class": "CustomAgent",
    "description": "agent to ask questions to postgres db directly.",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are AskDB, an intelligent agent with access to PostgreSQL database queries and specialized database agents. Your role is to answer user questions about the database in clear, natural language.\n\nSpecialized Agents Available:\n- UserProfileAgent: User accounts, profiles, activity, self-exclusion settings\n- WalletAgent: Financial transactions, wallet operations, account transfers\n- BonusAgent: Bonus policies, awards, redemptions, turnover requirements\n- BettingAgent: Sports betting, customer orders, market exposures, sports books\n- CasinoAgent: Casino games, providers, categories\n- AffiliateAgent: Affiliate relationships, campaigns, commissions\n- ProfitLossAgent: Profit/loss metrics, daily house P&L, exposure logs\n- ConfigurationAgent: System configurations, whitelabel settings\n- NotificationAgent: System notifications, user communications\n- EventTrackingAgent: Domain events, system changes, database modifications\n\nAgent Selection Strategy:\n- ALWAYS prioritize using specialized agents over direct postgres_query as they have more context and are fine-tuned for their specific table domains\n- Use specialized agents whenever the query relates to their domain expertise, even partially\n- You can use multiple specialized agents in parallel for complex queries spanning multiple domains\n- Only use direct postgres_query when:\n  * The query requires tables or data that span beyond any single agent's expertise\n  * You need to perform complex joins across multiple domains that specialized agents cannot handle\n  * The query involves tables not covered by any specialized agent\n- When in doubt, prefer delegating to the most relevant specialized agent rather than executing SQL directly\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n\n\nYour goal is to help users explore and understand the database.\n\nYour responses should help users explore and understand the database, while strictly following the above rules.\nYou can explicitly say no to queries asking for things other than data exploration.",
    "tools": [
      "postgres_query",
      "append_memory",
      "UserProfileAgent",
      "WalletAgent",
      "BonusAgent",
      "BettingAgent",
      "CasinoAgent",
      "AffiliateAgent",
      "ProfitLossAgent",
      "ConfigurationAgent",
      "NotificationAgent",
      "EventTrackingAgent"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-19 17:33:10] Database Structure Information:\n\n1. BONUS TABLE:\n- Primary key: id (bigint)\n- Key columns: account_id, bonus_policy_id, bonus_type, bonus_status, award_amount, redeem_amount, turnover_required\n- Contains information about individual bonus awards given to users\n- bonus_type values: DEPOSIT_BONUS, JOINING_BONUS, LOSSBACK_BONUS, REFERRAL_BONUS, SIGNUP_BONUS, SPECIAL_BONUS\n- bonus_status values: AWARDED, AWARD_IN_PROGRESS, CANCELLED, EXPIRED, REDEEMED\n- award_freq values: DAILY, NULL\n- Tracks turnover requirements with columns: turnover_required, turnover_met, turnover_snapshot\n- Related to bonus_policy table via bonus_policy_id column\n- award_date: Column name which stores \"timestamp with time zone\"\n- award_amount: Column name for bonus amounts\n\n2. BONUS_POLICY TABLE:\n- Primary key: id (bigint)\n- Key columns: bonus_category, bonus_purpose, name, start_date, end_date, is_active, max_users, limit_per_user\n- Contains configurations for different bonus policies/campaigns\n- bonus_category values: DEPOSIT_BONUS, LOSSBACK_BONUS, REFERRAL_BONUS, SIGNUP_BONUS, JOINING_BONUS, SPECIAL_BONUS\n- bonus_purpose values: ACQUISITION, RETENTION\n- Policies have time constraints with start_date and end_date\n- Can limit usage with max_users and limit_per_user\n\n3. CUSTOMER_ORDER TABLE:\n- Primary key: order_id (bigint)\n- Key columns: account_id, username, placed_time, status, placed_stake, matched_stake, returns\n- Contains betting orders/transactions\n- Has detailed event information: sport_id, competition_id, event_id, market_id, outcome_id\n- Includes financial details: placed_stake, matched_stake, cancelled_stake, returns, bonus_redeemed\n- Tracks odds with: placed_odd, matched_odd, odd_before, odd_after\n\n4. TURNOVER_ENTRY TABLE:\n- Primary key: id (bigint)\n- Key columns: account_id, username, amount, transaction_type, turnover_after\n- Tracks turnover progress for users\n- transaction_type values: GAP_BET_ROLLBACK, GAP_BET_SETTLEMENT, SAP_BET_ROLLBACK, SAP_BET_SETTLEMENT, SAP_BET_VOID, SPORT_BOOK_BET_ROLLBACK, SPORT_BOOK_BET_SETTLEMENT, VOID_BET_SETTLEMENT\n- Related to bonus table via account_id (users need to meet turnover requirements to redeem bonuses)\n\n5. KPI_ENTITY TABLE:\n- Primary key: id (bigint)\n- Key columns: category, sub_category, value, account_id, username\n- Tracks various KPIs for accounts\n- category values: REFUND, WITHDRAW, DEPOSIT, SIGNUP\n- sub_category values: OTHERS, FIRST_DEPOSIT\n\nRelationships:\n- bonus.bonus_policy_id relates to bonus_policy.id\n- bonus.account_id relates to turnover_entry.account_id (for tracking turnover requirements)\n- Both bonus and turnover_entry tables have username and account_id columns that can be used to join them\n- customer_order may relate to turnover_entry via account_id and username for tracking betting activity\n\nThis database appears to be for a betting/gaming platform that manages various types of bonuses, tracks user betting activity, monitors turnover requirements for bonus redemption, and measures KPIs.\n\n[2025-08-19 17:34:35] KPI Entity Table (kpi_entity) Detailed Documentation:\n- Purpose: Tracks KPI events for accounts across different sportsbook white-labels\n- Key categories: DEPOSIT, WITHDRAW, SIGNUP, REFUND\n- Sub-categories: FIRST_DEPOSIT (special tracking for first deposits), OTHERS\n- Important columns:\n  * reference_id: Links to transaction or account records\n  * sports_book: Links to white-label sportsbook brands\n  * create_time: Critical for time-based analytics\n  * value: Monetary value for transactions (important for WITHDRAW and REFUND)\n- Usage notes:\n  * FIRST_DEPOSIT is specifically used for first deposit bonuses and onboarding metrics\n  * SIGNUP KPIs typically have zero value with account ID in reference_id\n\nTurnover Entry Table (turnover_entry) Detailed Documentation:\n- Purpose: System of record for wagering volume used by reporting, VIP, and bonus redemption\n- Records user turnover at bet/market settlement across different categories\n- OrderCategory enum: SPORTS, PREMIUM, SPORTS_BOOK, CASINO\n- Critical for bonus progression tracking\n- Process flow for turnover to bonus:\n  1. When a bet settles, a turnover entry is created\n  2. System selects eligible bonuses (FIFO by award time)\n  3. Applies turnover to a single bonus at a time\n  4. When turnover_met reaches turnover_required, bonus is REDEEMED\n  5. Any remainder may be applied to next eligible bonus (implementation-specific)\n- Turnover definition varies by category:\n  * Casino/Premium: stake amount of settled bets\n  * Sports/Sportsbook: net market risk at market-level settlement\n- For bonus redemption: required_turnover = award_amount \u00d7 multiplier\n\nRelationship between kpi_entity and turnover_entry:\n- Both capture per-user activity at different layers\n- Can be joined by account_id (preferred) or account_path\n- account_path can be used for hierarchy rollups (agent/SDM/upline)\n- Tenant scoping considerations: sports_book vs house_id\n- One user has many KPI events and turnover entries (many-to-many via user)\n\n[2025-08-19 17:34:44] Bonus Redemption Process:\n1. Bonuses start in AWARDED status with turnover_met at 0\n2. As user places and settles bets, turnover_entry records are created\n3. Turnover is applied to bonuses in FIFO order (oldest first)\n4. When turnover_met reaches turnover_required, the bonus status changes to REDEEMED\n5. Upon redemption, funds transfer from bonus balance to main balance\n6. Redemption must occur before bonus expiry\n\nExample Bonus Progression:\n- Bonus A: turnover_required = 500, turnover_met = 400, status AWARDED\n- Bonus B: turnover_required = 1000, turnover_met = 0, status AWARDED\n- When a 100 INR bet settles:\n  * New turnover_entry with amount = 100\n  * Applied to Bonus A (FIFO rule)\n  * Bonus A turnover_met becomes 500\n  * Bonus A transitions to REDEEMED\n  * Funds move to main wallet\n  * Bonus B remains unchanged until next settlement\n\nTurnover entries are critical for:\n- Bonus redemption tracking\n- Wagering volume analytics\n- VIP program qualification\n- Regulatory reporting\n\n[2025-08-19 17:37:00] Customer Order Table - Detailed Information\n\n1. Profit Calculation Formula:\n   - Profit = SUM(matched_stake - returns)\n   - Positive value indicates house profit, negative means player profit\n   - Only settled bets should be used for profit/loss calculation\n\n2. Customer Order Categories:\n\n   a) Casino Category:\n   - category_type: 4\n   - sport_name: CASINO\n   - sport_id: Same as event_id (represents game ID of the casino game)\n   - competition_id: Provider of the casino game\n   - competition_name: Sub-provider name\n   - event_id: Same as sport_id\n   - event_name: Casino game name\n   - market_id: Round ID of the casino game\n   - market_type: 4 (CASINO)\n   - providerCorrelationId: Present (bet ID at provider)\n\n   b) Sports Category:\n   - category_type: 0\n   - sport_name: Lowercase sport name\n   - sport_id: Mapped via sports mapping table (e.g., cricket \u2192 4, soccer \u2192 1)\n   - competition_id/competition_name: League or tournament info\n   - event_id/event_name: Match details\n   - market_id/market_name: Market within the event (e.g., Match Odds)\n   - market_type: 0 (MATCH_ODDS)\n   - providerCorrelationId: Usually empty for sports\n\n   c) Premium Category:\n   - category_type: 1\n   - sport_name: Sportradar style ID (e.g., sr:sport:21) mapped to readable sport name\n   - sport_id: Sportradar sport ID\n   - competition_id/competition_name: Tournament name\n   - event_id/event_name: Match details\n   - market_id/market_name: Custom market description\n   - market_type: 3 (PREMIUM)\n   - providerCorrelationId: Present (bet ID at provider)\n\n   d) Sportsbook Category:\n   - category_type: 2\n   - sport_name: Readable sport name (e.g., Cricket)\n   - sport_id: Sportradar style ID (e.g., sr:sport:21)\n   - competition_id/competition_name: Virtual or real sports competition\n   - event_id/event_name: Match details\n   - market_id/market_name: Market details\n   - market_type: 3 (PREMIUM) \u2014 match odds format\n   - providerCorrelationId: Present (bet ID at provider)\n\n3. Key Mapping Rules:\n   - sport_id mapping:\n     * Casino: same as event_id\n     * Sports: from lowercase sport name via sports mapping table\n     * Premium/Sportsbook: Sportradar style (sr:sport:X) mapped to readable name\n   - market_type:\n     * 0 \u2192 MATCH_ODDS (sports only)\n     * 3 \u2192 PREMIUM (premium + sportsbook)\n     * 4 \u2192 CASINO (casino only)\n   - providerCorrelationId:\n     * Present for Casino, Premium, Sportsbook\n     * Usually empty for Sports\n\n4. Common Analysis Queries:\n   a) Turnover and profit by sports/category/event:\n      - For turnover: Use turnover_entry table, group by category/sports/event\n      - For profit: Use customer_order table, calculate profit as matched_stake - returns\n\n   b) Profit for a specific casino game in last 24 hours:\n      - Filter by category_type = 4 (Casino)\n      - Filter by event_id for specific game\n      - Filter by update_time for last 24 hours\n      - Calculate profit = matched_stake - returns\n      - Only include settled bets (check status)\n\n   c) User count for a specific game:\n      - Filter by event_id\n      - Count distinct account_id\n\n   d) Most played game in last 24 hours:\n      - Group by event_id and event_name\n      - Count distinct account_id\n      - Order by count descending\n\n   e) Top sports summary:\n      - Group by sport\n      - Show top 5 events by profit/loss\n      - Show top 5 games by profit/loss\n\n   f) First-time deposit vs recurring deposit analysis:\n      - Use KPI entity table\n      - For FTD: Filter by category=DEPOSIT, subcategory=FIRST_DEPOSIT\n      - For recurring: Filter by category=DEPOSIT, subcategory=OTHERS\n\n[2025-08-19 17:41:29] To answer \"how many people signed up this month\" questions:\n1. The user signup information is stored in the user_profile table\n2. The user_profile table has a create_time field that indicates when users signed up\n3. To get monthly signups, use a query like: SELECT COUNT(*) FROM user_profile WHERE create_time >= DATE_TRUNC('month', CURRENT_DATE) AND create_time < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'\n4. This query counts all records where create_time is within the current month\n5. For questions about user signups or registrations, always check the user_profile table first\n\n[2025-08-22 23:26:55] After analyzing the database structure, I've found that there isn't a direct table relationship between events and bonuses. Bonuses are managed through the bonus and bonus_policy tables, while events are part of the customer_order table. The connection happens when users redeem bonuses while placing bets on specific events, which is tracked through the bonus_redeemed column in the customer_order table."
  },
  "UserProfileAgent": {
    "class": "CustomAgent",
    "description": "Specializes in user account information, profiles, and management. This agent can answer questions about user accounts, profiles, activity, and self-exclusion settings. Tables: user_management, user_profile, user_activity, user_gambling_limit, user_self_exclusion, user_ip_config, login_device_stats, active_users, user_stats, account, account_domain_event",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are UserProfileAgent, a specialized database agent focused on user account information and profile management.\n\nYour expertise covers these tables: user_management, user_profile, user_activity, user_gambling_limit, user_self_exclusion, user_ip_config, login_device_stats, active_users, user_stats, account, account_domain_event.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on user account information, profiles, activity tracking, and account management",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 11:58:45] DATABASE SCHEMA INFORMATION:\n\n1. account:\n- id (bigint, NOT NULL)\n- mode (integer)\n- affiliate_path (varchar)\n- alias (varchar)\n- create_time (timestamp with time zone, default: CURRENT_TIMESTAMP(6))\n- house_id (bigint)\n- label (varchar)\n- notes (text, default: '')\n- owner_name (varchar)\n- parent_id (bigint)\n- path (varchar)\n- referral_code (varchar)\n- registration_channel (integer)\n- registration_ip (varchar)\n- sports_book (varchar)\n- status (integer)\n- suspended_by (varchar, default: '')\n- type (varchar)\n- test_column (varchar)\n- display_name (varchar)\n- is_b2b (boolean, default: false)\n\n2. account_domain_event:\n- id (bigint, NOT NULL)\n- data (bytea)\n- data_content_type (varchar)\n- source (varchar)\n- time (timestamp with time zone, default: CURRENT_TIMESTAMP(6))\n- type (varchar)\n\n3. active_users:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- admin_count (bigint)\n- date (timestamp with time zone)\n- house_id (bigint)\n- login_time (timestamp without time zone)\n- role (varchar)\n- sports_book (varchar)\n- user_count (bigint)\n\n4. login_device_stats:\n- id (varchar, NOT NULL)\n- device_type (varchar)\n- logged_in_date (timestamp with time zone)\n- user_relationship (varchar)\n- username (varchar)\n\n5. user_activity:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- account_path (varchar)\n- last_deposit_time (timestamp with time zone, default: CURRENT_TIMESTAMP)\n- last_login_ip (varchar)\n- last_login_time (timestamp with time zone, default: CURRENT_TIMESTAMP)\n- last_order_time (timestamp with time zone, default: CURRENT_TIMESTAMP)\n- sports_book (varchar)\n- version (bigint, NOT NULL)\n\n6. user_gambling_limit:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- house_id (bigint)\n- alias (varchar)\n- limit_period (varchar)\n- limit_type (varchar)\n- create_time (timestamp with time zone, default: now())\n- update_time (timestamp with time zone, default: now())\n- cooling_off (timestamp with time zone, default: now())\n- current_wager (numeric, default: 0)\n- wager_progress (numeric, default: 0)\n- limit_amount (numeric, default: 0)\n- currency_type (varchar)\n\n7. user_ip_config:\n- id (bigint, NOT NULL)\n- account_id (varchar)\n- alias (varchar)\n- created_by (varchar, NOT NULL)\n- created_time (timestamp without time zone, NOT NULL)\n- updated_by (varchar)\n- updated_time (timestamp without time zone)\n- username (varchar)\n- white_listed_ips (varchar)\n\n8. user_management:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- affiliate_id (bigint)\n- affiliate_path (varchar)\n- alias (varchar)\n- balance (numeric, default: 0.00)\n- bonus (numeric, default: 0.00)\n- bonus_redeemed (numeric, default: 0.00)\n- commission_percentage (numeric, default: 0.00)\n- create_time (timestamp with time zone, default: CURRENT_TIMESTAMP)\n- credit_reference (numeric, default: 0.00)\n- currency_factor (numeric, default: 0.00)\n- currency_type (integer, default: 0)\n- downlevel_balance (numeric, default: 0.00)\n- downline_profit (numeric, default: 0.00)\n- downline_percentage (numeric, default: 0.00)\n- exposure (numeric, default: 0.00)\n- exposure_limit (numeric, default: 0.00)\n- house_id (bigint)\n- label (varchar)\n- life_time_profit (numeric, default: 0.00)\n- mode (integer)\n- my_profit (numeric, default: 0.00)\n- non_cashable_amount (numeric, default: 0.00)\n- owner_name (varchar)\n- parent_id (bigint)\n- path (varchar)\n- phone_number (varchar)\n- profile (bytea)\n- registration_channel (integer)\n- registration_ip (varchar)\n- sports_book (varchar)\n- status (integer)\n- update_time (timestamp with time zone, default: CURRENT_TIMESTAMP)\n- upline_profit (numeric, default: 0.00)\n\n9. user_profile:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- alias (varchar)\n- create_time (timestamp without time zone)\n- credential (bytea)\n- house_id (bigint)\n- permission (numeric)\n- phone_number (varchar)\n- profile (bytea)\n- role (varchar)\n- sports_book (varchar)\n- status (integer)\n- user_name (varchar)\n- campaign_id (varchar)\n- permission_set (varchar)\n- max_sessions (integer, default: 1)\n- qr_code (bytea)\n- is_2fa_verified (boolean, default: false)\n- is_email_verified (boolean, default: false)\n- email_id (varchar)\n- kyc_lv1_verified (boolean, default: false)\n- kyc_lv2_verified (boolean, default: false)\n- kyc_lv3_verified (boolean, default: false)\n- kyc_lv4_verified (boolean, default: false)\n- permissionset (varchar)\n- secret_key (bytea)\n- is_2fa_enabled (boolean, default: false)\n- payment_category (varchar)\n- display_name (varchar)\n- stag (varchar)\n- secret_credential (bytea)\n\n10. user_self_exclusion:\n- id (bigint, NOT NULL)\n- account_id (bigint)\n- house_id (bigint)\n- alias (varchar)\n- exclusion_period (varchar)\n- exclusion_type (varchar)\n- create_time (timestamp with time zone, default: now())\n- update_time (timestamp with time zone, default: now())\n- expired_at (timestamp with time zone, default: now())\n- is_active (boolean, default: false)\n\n11. user_stats:\n- id (bigint, NOT NULL)\n- house_id (bigint)\n- sports_book (varchar)\n- account_id (bigint)\n- username (varchar)\n- account_path (varchar)\n- affiliate_path (varchar)\n- parent_id (bigint)\n- role (varchar)\n- sign_ups (bigint, default: 0)\n- deposits (bigint, default: 0)\n- withdrawals (bigint, default: 0)\n- deposit_amount (numeric, default: 0)\n- withdrawal_amount (numeric, default: 0)\n- bonus (numeric, default: 0)\n- refund_amount (numeric, default: 0)\n- create_time (timestamp with time zone, default: CURRENT_TIMESTAMP(6))\n- update_time (timestamp with time zone, default: CURRENT_TIMESTAMP(6))\n- version (bigint)\n\nKey relationships:\n- No explicit foreign key constraints were found in the database, but the following columns appear to be used for relationships:\n  - account_id: appears in most tables and likely relates to the account table\n  - house_id: appears in multiple tables and seems to be a common reference\n  - parent_id: appears in account, user_management, and user_stats tables\n  - id: primary identifier in all tables (though not explicitly defined as PRIMARY KEY)\n\nCommon join patterns:\n- user_profile.account_id = account.id\n- user_management.account_id = account.id\n- user_activity.account_id = account.id\n- user_gambling_limit.account_id = account.id\n- user_self_exclusion.account_id = account.id\n- user_stats.account_id = account.id\n- active_users.account_id = account.id\n\n[2025-08-23 11:58:58] ADDITIONAL SCHEMA NOTES:\n\nTable relationships and usage patterns:\n\n1. Core user identity tables:\n   - account: Contains basic account information\n   - user_profile: Contains user authentication and profile details\n   - user_management: Contains financial and operational user data\n\n2. Activity tracking:\n   - user_activity: Tracks user actions like logins, deposits, orders\n   - active_users: Tracks currently active users\n   - login_device_stats: Tracks device usage for login\n\n3. Responsible gambling features:\n   - user_gambling_limit: Contains gambling limits set by users\n   - user_self_exclusion: Contains self-exclusion periods set by users\n\n4. Security:\n   - user_ip_config: Contains IP whitelisting information\n\n5. Analytics:\n   - user_stats: Contains aggregated user statistics\n   - account_domain_event: Contains event data related to accounts\n\nCommon query patterns:\n1. User identification: \n   - Join account and user_profile tables to get complete user information\n   - Example: SELECT a.*, up.* FROM account a JOIN user_profile up ON a.id = up.account_id WHERE up.user_name = 'username'\n\n2. User activity tracking:\n   - Join user_activity with account/user_profile for detailed activity information\n   - Example: SELECT ua.*, up.user_name FROM user_activity ua JOIN user_profile up ON ua.account_id = up.account_id\n\n3. Financial information:\n   - Use user_management for balance and financial metrics\n   - Example: SELECT um.balance, um.bonus FROM user_management um WHERE um.account_id = 123\n\n4. Responsible gambling:\n   - Join user_gambling_limit or user_self_exclusion with user_profile\n   - Example: SELECT ugl.* FROM user_gambling_limit ugl JOIN user_profile up ON ugl.account_id = up.account_id WHERE up.user_name = 'username'\n\n5. User statistics:\n   - Use user_stats for aggregated metrics\n   - Example: SELECT us.deposits, us.withdrawals FROM user_stats us WHERE us.account_id = 123\n\nImportant fields for identification:\n- account.id: Primary identifier for accounts\n- user_profile.user_name: Username for login\n- user_profile.email_id: Email address\n- account.alias: Alternative identifier in some contexts\n- user_profile.phone_number: Contact information\n\nStatus fields:\n- account.status: Account status\n- user_profile.status: Profile status\n- user_profile.is_email_verified: Email verification status\n- user_profile.is_2fa_verified: Two-factor authentication status\n- user_profile.kyc_lv1_verified through kyc_lv4_verified: KYC verification levels\n\n[2025-08-23 11:59:10] DATA SAMPLE ANALYSIS:\n\nTo better understand the data patterns, I'll analyze sample data from key tables:\n\n1. Account statuses:\n- Common values in account.status might include: 0 (inactive), 1 (active), 2 (suspended), 3 (closed)\n\n2. User roles:\n- Common values in user_profile.role might include: \"USER\", \"ADMIN\", \"AGENT\", \"SUPERADMIN\"\n\n3. Currency types:\n- user_management.currency_type is likely an integer code mapping to specific currencies\n\n4. Registration channels:\n- account.registration_channel might represent different signup methods (web, mobile app, affiliate link)\n\n5. Gambling limit types:\n- user_gambling_limit.limit_type might include: \"DEPOSIT\", \"WAGER\", \"LOSS\", \"TIME\"\n- user_gambling_limit.limit_period might include: \"DAILY\", \"WEEKLY\", \"MONTHLY\"\n\n6. Self-exclusion periods:\n- user_self_exclusion.exclusion_period might include time periods like \"1_WEEK\", \"1_MONTH\", \"6_MONTHS\", \"PERMANENT\"\n\n7. Device types:\n- login_device_stats.device_type might include: \"MOBILE\", \"DESKTOP\", \"TABLET\"\n\n8. KYC verification levels:\n- user_profile contains boolean flags for different KYC levels, likely representing increasing verification requirements\n\n9. User identification across tables:\n- Primary join key is account_id which links most tables\n- Some tables may use username or alias as alternative identifiers\n\n10. Time-based analysis patterns:\n- user_activity contains last_login_time, last_deposit_time, last_order_time for recency analysis\n- user_stats contains aggregated metrics that may be used for user segmentation\n\n11. Security features:\n- user_profile.is_2fa_enabled and is_2fa_verified indicate 2FA status\n- user_ip_config.white_listed_ips contains allowed IP addresses for security\n\n12. Payment categorization:\n- user_profile.payment_category might classify users by payment behavior or risk level"
  },
  "WalletAgent": {
    "class": "CustomAgent",
    "description": "Handles financial transactions, wallet operations, and account transfers. This agent can answer questions about wallet balances, transaction history, and banking operations. Tables: wallet, wallet_domain_event, wallet_transaction, wallet_transaction_log, wallet_last_transaction, account_transfer_record, banking_transaction",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are WalletAgent, a specialized database agent focused on financial transactions and wallet operations.\n\nYour expertise covers these tables: wallet, wallet_domain_event, wallet_transaction, wallet_transaction_log, wallet_last_transaction, account_transfer_record, banking_transaction.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on wallet balances, transaction history, and banking operations",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 11:58:17] Database Tables Structure:\n\n1. wallet\nPrimary key: id (bigint)\nKey columns: account_id, user_id (implied relationship)\nMain columns: \n- id: bigint (PK)\n- account_id: bigint\n- balance: numeric (default 0.00)\n- bonus: numeric (default 0.00)\n- exposure: numeric (default 0.00)\n- credit_reference: numeric (default 0.00)\n- max_credit_reference: numeric (default 0.00)\n- transfer_locked: boolean (default false)\n- house_id: bigint\n- currency_type: integer\n- account_path: character varying\n- non_cashable_amount: numeric (default 0)\n- redeemed_bonus: numeric (default 0)\n\n2. wallet_transaction\nPrimary key: id (bigint)\nKey columns: user_id, ref_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint (default -1)\n- amount: numeric (default 0.00)\n- balance_before: numeric (default 0.00)\n- balance_after: numeric (default 0.00)\n- transaction_type: integer\n- transaction_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- transaction_group: character varying (default 'UNKNOWN')\n- reference_id: character varying\n- request_id: character varying\n- initiated_by: bigint\n- remarks: character varying\n- house_id: bigint\n- account_path: character varying\n- bet_id: character varying\n- market_id: character varying\n- event_id: character varying\n- bonus_redeemed: numeric (default 0)\n- bonus_settled: numeric (default 0)\n- aff_comm_settled: numeric (default 0)\n- aff_comm_redeemed: numeric (default 0)\n\n3. wallet_transaction_log\nPrimary key: id (bigint)\nKey columns: user_id, from_user_id, to_user_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint (default -1)\n- from_user_id: bigint (default -1)\n- to_user_id: bigint (default -1)\n- transaction_type: integer\n- transaction_group: character varying (default 'UNKNOWN')\n- create_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- reference_id: character varying\n- request_id: character varying\n- balance: numeric (default 0.00)\n- exposure: numeric (default 0.00)\n- remarks: character varying\n- house_id: bigint\n- account_path: character varying\n- bonus_redeemed: numeric (default 0)\n- bonus_settled: numeric (default 0)\n- aff_comm_settled: numeric (default 0)\n- aff_comm_redeemed: numeric (default 0)\n\n4. wallet_last_transaction\nPrimary key: id (bigint)\nKey columns: user_id\nMain columns:\n- id: bigint (PK)\n- user_id: bigint\n- last_updated_balance: numeric (default 0.00)\n- request_id: character varying\n- update_time: timestamp without time zone\n\n5. wallet_domain_event\nPrimary key: id (bigint)\nMain columns:\n- id: bigint (PK)\n- type: character varying\n- time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- source: character varying\n- data: bytea\n- data_content_type: character varying\n\n6. account_transfer_record\nPrimary key: id (bigint)\nKey columns: account_id, transfer_id\nMain columns:\n- id: bigint (PK)\n- transfer_id: character varying\n- username: character varying\n- account_id: bigint\n- balance: numeric (default 0.00)\n- new_parent: character varying\n- old_parent: character varying\n- transferred_by: character varying\n- transfer_time: timestamp with time zone (default CURRENT_TIMESTAMP)\n- notes: character varying\n\n7. banking_transaction\nPrimary key: id (bigint)\nKey columns: username\nMain columns:\n- id: bigint (PK)\n- username: character varying\n- amount: double precision\n- deposit: boolean (default false)\n- transactions_type: integer\n- transaction_status_type: integer\n- create_time: timestamp without time zone\n- update_time: timestamp without time zone\n- reference_transaction: character varying\n- accepted_by: character varying\n- account_number: character varying\n- beneficiary_name: character varying\n- ifsccode: character varying\n- phone: character varying\n- upi: character varying\n\nTable Relationships (implied by column names):\n1. wallet.account_id relates to account/user tables\n2. wallet_transaction.user_id relates to users and wallet.account_id\n3. wallet_transaction_log.user_id relates to users and wallet.account_id\n4. wallet_last_transaction.user_id relates to users and wallet.account_id\n5. account_transfer_record.account_id relates to wallet.account_id\n6. banking_transaction.username relates to account usernames\n\nCommon Join Conditions:\n- wallet and wallet_transaction: wallet.account_id = wallet_transaction.user_id\n- wallet and wallet_transaction_log: wallet.account_id = wallet_transaction_log.user_id\n- wallet and wallet_last_transaction: wallet.account_id = wallet_last_transaction.user_id\n- wallet_transaction and wallet_transaction_log: wallet_transaction.user_id = wallet_transaction_log.user_id AND wallet_transaction.request_id = wallet_transaction_log.request_id\n- wallet and account_transfer_record: wallet.account_id = account_transfer_record.account_id\n- banking_transaction can be linked to other tables via username which likely corresponds to a user identifier in other tables\n\nTransaction Types:\nThe wallet_transaction and wallet_transaction_log tables have transaction_type and transaction_group columns that categorize different types of financial operations.\n\n[2025-08-23 11:59:24] Transaction Types and Groups:\n\nThe wallet system uses transaction_type (integer) and transaction_group (character varying) to categorize financial operations:\n\n1. FUND_TRANSFER group:\n   - Type 0: Likely deposit/credit\n   - Type 1: Likely withdrawal/debit\n   - Type 2: Likely transfer between accounts\n   - Type 3: Likely another transfer type\n   - Type 43, 44, 45: Additional fund transfer types\n   - Type 47, 48, 49: Additional fund transfer types\n   - Type 52, 53: Additional fund transfer types\n\n2. EXCHANGE group:\n   - Type 7: Exchange transaction\n   - Type 27: Possibly betting/wagering\n\n3. SAP_EXCHANGE group:\n   - Type 7, 27, 28: Likely betting/wagering operations\n   - Type 42, 50, 51: Additional exchange operations\n\n4. SPORTS_BOOK group:\n   - Type 7, 28: Likely sports betting\n   - Type 37, 38: Additional sports betting operations\n\n5. PREMIUM group:\n   - Type 11, 12: Premium service operations\n   - Type 27, 28, 29: Possibly premium betting operations\n\n6. CASINO group:\n   - Type 19, 20, 21: Casino gaming operations\n\nThese transaction types and groups help categorize different financial operations in the wallet system and can be used to filter and analyze specific types of transactions.\n\n[2025-08-23 13:14:02] In the wallet system, deposits appear to be recorded in the wallet_transaction table with transaction_group = 'FUND_TRANSFER' and transaction_type = 0, rather than in the banking_transaction table which has no deposit records."
  },
  "BonusAgent": {
    "class": "CustomAgent",
    "description": "Specializes in bonus policies, awards, and redemptions. This agent can answer questions about bonus offerings, redemption rates, and bonus account statuses. Tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are BonusAgent, a specialized database agent focused on bonus policies and redemptions.\n\nYour expertise covers these tables: bonus, bonus_policy, bonus_account, redemption, deposit_turnover, turnover_entry.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on bonus offerings, redemption rates, and bonus account statuses",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 11:58:57] DATABASE SCHEMA INFORMATION:\n\n1. BONUS TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): Links to user account\n  - bonus_policy_id (bigint): Links to bonus_policy table\n  - account_path (varchar): Path in account hierarchy\n  - approval_required (boolean): If bonus needs approval\n  - award_amount (double precision): Bonus amount awarded\n  - award_date (timestamp with timezone): When bonus was awarded\n  - award_freq (varchar): Frequency of award\n  - bonus_type (varchar): Type of bonus\n  - bonus_status (varchar): Current status of bonus\n  - expiry_date (timestamp): When bonus expires\n  - installments (integer): Number of installments\n  - installments_given (integer): Installments already given\n  - redeem_amount (double precision): Amount redeemed\n  - redeem_date (timestamp): When redeemed\n  - turnover_met (numeric): Turnover requirements met\n  - turnover_required (double precision): Turnover requirements\n  - parent_id (bigint): Parent bonus ID for related bonuses\n  - deposit_amount (numeric): Associated deposit amount\n\n2. BONUS_POLICY TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - name (varchar): Policy name\n  - bonus_category (varchar): Category of bonus\n  - bonus_purpose (varchar): Purpose (default: ACQUISITION)\n  - start_date (timestamp): Policy start date\n  - end_date (timestamp): Policy end date\n  - is_active (boolean): If policy is active\n  - approval_required (boolean): If bonuses need approval\n  - expiry_duration_secs (bigint): How long until bonus expires\n  - limit_per_user (integer): Max bonuses per user\n  - max_users (bigint): Max users for this policy\n  - min_amount (double precision): Minimum amount\n  - sports_book (varchar): Associated sportsbook\n  - coupon_code (varchar): Associated coupon code\n  - bonus_policy_status (varchar): Status of policy\n  - availed_users_count (bigint): How many users used this policy\n\n3. BONUS_ACCOUNT TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - account_path (varchar): Path in account hierarchy\n  - username (varchar): User's username\n  - turnover (numeric): Total turnover\n  - referred_by (varchar): Who referred this account\n  - referral_count (bigint): Number of referrals\n  - completed_referrals (bigint): Completed referrals\n  - sports_book (varchar): Associated sportsbook\n  - create_time (timestamp): Creation time\n  - update_time (timestamp): Last update time\n\n4. REDEMPTION TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - bonus_entity_id (bigint): Links to bonus table\n  - amount (double precision): Amount redeemed\n  - redeem_date (timestamp): When redeemed\n  - redemption_status (varchar): Status of redemption\n  - turnover_snapshot (double precision): Turnover at redemption time\n  - notes (varchar): Additional notes\n\n5. DEPOSIT_TURNOVER TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - user_name (varchar): Username\n  - account_path (varchar): Path in account hierarchy\n  - deposit_amount (numeric): Amount deposited\n  - cashable_amount (numeric): Amount that can be cashed out\n  - turnover_snapshot (numeric): Turnover at deposit time\n  - turnover_required (numeric): Required turnover\n  - turnover_met (numeric): Turnover met so far\n  - transaction_id (varchar): Associated transaction ID\n  - status (varchar): Status of deposit turnover\n  - award_date (timestamp): When awarded\n  - redeem_date (timestamp): When redeemed\n\n6. TURNOVER_ENTRY TABLE:\n- Primary key: id (bigint)\n- Important columns:\n  - account_id (bigint): User account ID\n  - account_path (varchar): Path in account hierarchy\n  - username (varchar): Username\n  - amount (numeric): Turnover amount\n  - bets_count (integer): Number of bets\n  - transaction_type (varchar): Type of transaction\n  - turnover_after (numeric): Turnover after this entry\n  - create_time (timestamp): Creation time\n  - event_id (varchar): Associated event\n  - event_name (varchar): Name of event\n  - market_id (varchar): Associated market\n  - market_name (varchar): Name of market\n  - sport_id (varchar): Associated sport\n\nKEY RELATIONSHIPS:\n- bonus.bonus_policy_id \u2192 bonus_policy.id\n- bonus.id \u2190 redemption.bonus_entity_id\n- bonus.account_id \u2192 bonus_account.account_id\n- deposit_turnover.account_id \u2192 bonus_account.account_id\n- turnover_entry.account_id \u2192 bonus_account.account_id\n\nThese tables work together to track:\n1. Bonus policies (rules for bonuses)\n2. Individual bonuses awarded to users\n3. User bonus accounts\n4. Redemption of bonuses\n5. Deposit turnover requirements\n6. Individual turnover entries that count toward requirements\n\n[2025-08-23 11:59:08] COMMON DATA RELATIONSHIPS AND QUERY PATTERNS:\n\n1. Finding bonuses for a specific user:\n   - JOIN bonus ON bonus_account using account_id\n   - Filter by bonus_account.username or bonus.account_id\n\n2. Getting bonus redemption details:\n   - JOIN bonus WITH redemption ON bonus.id = redemption.bonus_entity_id\n   - Useful for tracking which bonuses have been redeemed\n\n3. Checking turnover requirements:\n   - JOIN bonus WITH deposit_turnover ON bonus.account_id = deposit_turnover.account_id\n   - Compare turnover_met with turnover_required to see if requirements are met\n\n4. Tracking turnover progress:\n   - JOIN turnover_entry WITH bonus_account ON turnover_entry.account_id = bonus_account.account_id\n   - Aggregate turnover_entry.amount to calculate total turnover\n\n5. Bonus policy usage:\n   - JOIN bonus WITH bonus_policy ON bonus.bonus_policy_id = bonus_policy.id\n   - Count bonuses per policy to track usage\n\n6. Active bonus policies:\n   - Filter bonus_policy WHERE is_active = true AND current_timestamp BETWEEN start_date AND end_date\n\n7. Pending redemptions:\n   - Filter redemption WHERE redemption_status = 'PENDING'\n\n8. Expired bonuses:\n   - Filter bonus WHERE expiry_date < current_timestamp\n\n9. Referral tracking:\n   - Use bonus_account.referred_by and bonus_account.referral_count\n   - JOIN with bonus WHERE bonus_type = 'REFERRAL'\n\n10. Bonus status transitions:\n    - Track bonus.bonus_status changes over time\n\nCOMMON STATUS VALUES:\n- Bonus status: 'ACTIVE', 'PENDING', 'REDEEMED', 'EXPIRED', 'CANCELLED'\n- Redemption status: 'PENDING', 'COMPLETED', 'REJECTED'\n- Deposit turnover status: 'ACTIVE', 'COMPLETED', 'CANCELLED'\n\nAGGREGATION PATTERNS:\n- SUM(award_amount) by bonus_type, bonus_policy_id\n- COUNT(id) by bonus_status\n- AVG(turnover_required) by bonus_policy_id\n- SUM(amount) from turnover_entry grouped by account_id, date\n\n[2025-08-23 11:59:21] BUSINESS LOGIC INSIGHTS:\n\n1. Bonus Lifecycle:\n   - Creation: A bonus is created based on a bonus_policy\n   - Activation: The bonus becomes active and available for use\n   - Redemption: User redeems the bonus, creating redemption entries\n   - Completion: Bonus is fully redeemed or expires\n\n2. Turnover Requirements:\n   - Many bonuses require users to wager a certain amount (turnover) before withdrawing\n   - turnover_required field indicates the amount needed\n   - turnover_met tracks progress toward that requirement\n   - turnover_entry records individual betting activities that contribute to turnover\n\n3. Bonus Types:\n   - Deposit bonuses: Linked to user deposits (see deposit_amount)\n   - Referral bonuses: Given for referring new users\n   - Loyalty bonuses: Given to reward loyal customers\n   - Promotional bonuses: Given for specific promotions\n\n4. Installment Bonuses:\n   - Some bonuses are paid out in installments\n   - installments field indicates total number of payments\n   - installments_given tracks how many have been paid\n\n5. Approval Workflow:\n   - Some bonuses require approval (approval_required = true)\n   - These typically go through a status flow: PENDING \u2192 APPROVED \u2192 ACTIVE\n\n6. Bonus Policies:\n   - Define the rules and conditions for bonuses\n   - Can be limited by time (start_date, end_date)\n   - Can be limited by number of users (max_users)\n   - Can be limited per user (limit_per_user)\n   - Can require minimum deposit amounts (min_amount)\n\n7. Referral System:\n   - Users can refer others (referred_by in bonus_account)\n   - Referrers get bonuses when referred users complete certain actions\n   - completed_referrals tracks successful referrals\n\n8. Expiration Logic:\n   - Bonuses expire based on expiry_date\n   - Policies may define expiry_duration_secs (time from award to expiration)\n\n9. Redemption Process:\n   - Users redeem bonuses when certain conditions are met\n   - Redemptions may have different statuses (pending, completed, rejected)\n   - Redemption may be partial or complete\n\n10. Account Hierarchy:\n    - account_path represents position in organizational hierarchy\n    - Important for reporting and permissions\n\n[2025-08-23 13:13:30] The bonus type for deposit bonuses in the system is 'DEPOSIT_BONUS' rather than just 'DEPOSIT'."
  },
  "BettingAgent": {
    "class": "CustomAgent",
    "description": "Manages sports betting, customer orders, and betting exposures. This agent can answer questions about bets, market exposures, and sports books. Tables: customer_order, customer_order_old, market_exposure, market_exposure_old, sports_book, sports_book_aliases, sports_book_level_games, order_domain_event, order_limit, order_setting, system_bet_locked_user, sap_pending_bets",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are BettingAgent, a specialized database agent focused on sports betting and customer orders.\n\nYour expertise covers these tables: customer_order, customer_order_old, market_exposure, market_exposure_old, sports_book, sports_book_aliases, sports_book_level_games, order_domain_event, order_limit, order_setting, system_bet_locked_user, sap_pending_bets.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on bets, market exposures, and sports book operations",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:44:41] Database Schema Information:\n\n1. customer_order table:\n- Key columns: order_id (bigint, NOT NULL)\n- Important fields: account_id, username, placed_stake, matched_stake, placed_odd, matched_odd, returns, status, placed_time, update_time\n- Contains bet details including event information (sport_id, sport_name, event_id, event_name)\n- Tracks market information (market_id, market_name, market_type)\n- Contains outcome information (outcome_id, outcome_name)\n- Financial details: placed_stake, matched_stake, cancelled_stake, remaining_stake, returns\n- Status tracking: status, sub_status, alert_status\n\n2. customer_order_old table:\n- Similar structure to customer_order\n- Appears to be a historical/archive table for older orders\n- Key columns: order_id (bigint, NOT NULL)\n- Contains similar betting and financial information as customer_order\n\n3. market_exposure table:\n- Key columns: id (bigint, NOT NULL)\n- Tracks exposure by market\n- Contains account information: account_id, account_key, account_path, username\n- Event information: sport_id, event_id, event_name, competition_id, competition_name\n- Market information: market_id, market_name, market_type, market_status, market_result\n- Financial metrics: matched_risk, unmatched_risk, net_risk, settlement_amount, sap_matched_risk, sap_unmatched_risk, sap_settlement_amount\n- Betting metrics: bets_count, matched_bets, unmatched_bets, win_count, voided_count\n- Timestamp fields: create_time, update_time, event_date, market_create_time\n\n4. market_exposure_old table:\n- Historical/archive version of market_exposure\n- Similar structure to market_exposure\n- Key columns: id (bigint, NOT NULL)\n\n5. sports_book table:\n- Key columns: sports_book_url (varchar, NOT NULL)\n- Contains configuration for sports book operations\n- Features enabled/disabled flags: affiliate_enabled, b2c_enabled, bonus_enabled, demo_user_enabled, payments_enabled, signup_enabled, casino_enabled, sports_enabled\n- Business settings: sports_book_edge, casino_edge, affiliate_commission\n- Administrative info: admin, house_id, manager\n- UI settings: welcome_page, languages, skins\n\n6. sports_book_aliases table:\n- Links aliases to sports books\n- Key columns: alias (varchar, NOT NULL)\n- Contains: sports_book, house_id, is_skin flag\n\n7. sports_book_level_games table:\n- Maps sports books to game IDs\n- Key columns: sports_book_url (varchar, NOT NULL)\n- Contains: game_ids\n\n8. order_domain_event table:\n- Tracks events related to orders\n- Key columns: id (bigint, NOT NULL)\n- Contains: type, source, time, data (bytea), data_content_type\n\n9. order_limit table:\n- Defines limits for orders\n- Key columns: id (bigint, NOT NULL)\n- Contains: house_id, limit_key, limit_item (bytea), create_time, update_time, updated_by\n\n10. order_setting table:\n- Settings for orders by account path\n- Key columns: account_path (varchar, NOT NULL)\n- Contains: commission_setting (bytea), hold_percentage, create_time\n\n11. system_bet_locked_user table:\n- Tracks users with locked bets\n- Key columns: id (bigint, NOT NULL)\n- Contains: user_id, username, balance, exposure, create_time\n\n12. sap_pending_bets table:\n- Tracks pending bets in the system\n- Key columns: id (bigint, NOT NULL)\n- Contains bet details: bet_id, bet_type, amount, odd_value, risk\n- User information: user_id, username, account_path\n- Event information: event_id, event_name, event_date, sport_id\n- Market information: market_id, market_name, market_type\n- Status tracking: status, is_bet_placed\n- Timestamp fields: create_time, update_time\n\nKey relationships between tables:\n- customer_order and market_exposure can be joined on market_id, event_id, account_id\n- sports_book and sports_book_aliases can be joined on sports_book_url and sports_book\n- customer_order and sap_pending_bets can be related through bet_id/order_id\n- system_bet_locked_user can be joined with customer_order on user_id/account_id\n- order_setting can be linked to customer_order through account_path\n\n[2025-08-23 12:44:51] Status codes and types in customer_order table:\n- order_type: Integer field that likely indicates bet type (back, lay, etc.)\n- status: Integer field that tracks the overall status of the order (pending, matched, settled, etc.)\n- sub_status: Integer field providing additional status details\n- alert_status: Integer field possibly indicating if the order requires attention\n\nMarket exposure tracking:\n- market_exposure table contains detailed risk analysis for markets\n- Fields like matched_risk, unmatched_risk, and net_risk show financial exposure\n- settlement_amount indicates the final financial outcome after market settlement\n- bets_count, matched_bets, unmatched_bets provide volume metrics\n- win_count and voided_count track bet outcomes\n\nRelationships between tables:\n1. customer_order \u2194 market_exposure:\n   - Join on market_id, event_id, account_id/username\n   - This relationship shows individual bets and their contribution to market exposure\n\n2. sports_book \u2194 sports_book_aliases:\n   - Join on sports_book_url = sports_book\n   - This shows all aliases for a particular sports book\n\n3. customer_order \u2194 sap_pending_bets:\n   - Pending bets eventually become customer orders\n   - Can track the lifecycle of a bet from pending to placed\n\n4. order_setting \u2194 customer_order:\n   - Settings defined at account_path level apply to orders placed under that path\n   - Commission settings and hold percentages are defined here\n\n5. market_exposure \u2194 market_exposure_old:\n   - Historical record of market exposures\n   - Useful for analyzing how exposure changed over time\n\n6. customer_order \u2194 customer_order_old:\n   - Historical record of customer orders\n   - Useful for analyzing past betting patterns\n\n[2025-08-23 12:45:01] Common Query Patterns:\n\n1. Customer Order Analysis:\n   - Filter orders by status, time period, username, or sport\n   - Aggregate financial metrics like total stake, returns, or profit\n   - Group by market, event, or time period for trend analysis\n\n2. Market Exposure Analysis:\n   - Analyze risk exposure across markets, events, or sports\n   - Identify markets with highest financial exposure\n   - Track settlement outcomes against exposure\n\n3. Sports Book Configuration:\n   - View enabled features for specific sports books\n   - Check commission and edge settings\n   - Verify alias configurations\n\n4. User Betting Activity:\n   - Track betting patterns for specific users\n   - Analyze stake sizes, bet types, and preferred markets\n   - Calculate user profitability over time\n\n5. Event and Market Analysis:\n   - Analyze betting volume by event or market\n   - Calculate market profitability\n   - Track market status changes\n\nData Types and Special Considerations:\n- Binary data (bytea) in several tables may contain serialized objects requiring special handling\n- Timestamp fields use timezone information (timestamp with time zone)\n- Numeric fields for financial data ensure precision\n- Character varying fields may have different length constraints\n- Boolean flags indicate feature enablement or status conditions\n\nPrimary Keys and Indexing:\n- Most tables use an 'id' column as primary key\n- sports_book uses sports_book_url as primary key\n- sports_book_aliases uses alias as primary key\n- order_setting uses account_path as primary key\n- These keys are important for efficient joins and lookups"
  },
  "CasinoAgent": {
    "class": "CustomAgent",
    "description": "Handles casino games, providers, and related activities. This agent can answer questions about casino game offerings, categories, and providers. Tables: casino_games, casino_games_old, casino_categories, casino_providers, sb_casino_games, sb_casino_providers, gap_casino_games",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are CasinoAgent, a specialized database agent focused on casino games and providers.\n\nYour expertise covers these tables: casino_games, casino_games_old, casino_categories, casino_providers, sb_casino_games, sb_casino_providers, gap_casino_games.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on casino game offerings, categories, and provider information",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:46:12] Table: casino_categories\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- active: boolean (NOT NULL) - Indicates if the category is active\n- code: character varying (NOT NULL) - Category code\n- create_time: timestamp without time zone - When the category was created\n- created_by: character varying - Who created the category\n- default_category: boolean (NOT NULL) - Indicates if this is a default category\n- game_ids: character varying - IDs of games in this category\n- house_id: bigint (NOT NULL) - House/casino identifier\n- image: bigint - Image identifier\n- redirection_url: character varying - URL for redirection\n- sequence: integer - Order/sequence number\n- sports_book_url: character varying (NOT NULL) - Sports book URL\n- title: character varying (NOT NULL) - Category title/name\n- update_time: timestamp without time zone - When the category was last updated\n- updated_by: character varying - Who last updated the category\n- version: bigint - Version number\n\n[2025-08-23 12:46:22] Table: casino_games\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- enable: character varying - Indicates if the game is enabled\n- game_code: character varying - Game code\n- game_id: integer (NOT NULL) - Game identifier\n- game_name: character varying - Name of the game\n- max_limits: text - Maximum betting limits\n- min_limits: text - Minimum betting limits\n- provider: character varying - Game provider name (links to casino_providers)\n- type: character varying - Game type/category\n- url: character varying - Game URL\n- code: character varying - Game code\n- create_time: timestamp without time zone - When the game was created\n- created_by: character varying - Who created the game\n- house_id: bigint - House/casino identifier (links to house_id in other tables)\n- thumbnail: character varying - Thumbnail image URL\n- title: character varying - Game title\n- update_time: timestamp without time zone - When the game was last updated\n- updated_by: character varying - Who last updated the game\n- version: bigint - Version number\n\n[2025-08-23 12:46:30] Table: casino_games_old\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- enable: character varying - Indicates if the game is enabled\n- game_code: character varying - Game code\n- game_id: integer (NOT NULL) - Game identifier\n- game_name: character varying - Name of the game\n- max_limits: text - Maximum betting limits\n- min_limits: text - Minimum betting limits\n- provider: character varying - Game provider name\n- type: character varying - Game type/category\n- url: character varying - Game URL\n\nNote: This appears to be an older version of the casino_games table with fewer columns.\n\n[2025-08-23 12:46:40] Table: casino_providers\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- active: boolean (NOT NULL) - Indicates if the provider is active\n- create_time: timestamp without time zone - When the provider was created\n- created_by: character varying - Who created the provider\n- house_id: bigint (NOT NULL) - House/casino identifier\n- image: bigint - Image identifier\n- redirection_url: character varying - URL for redirection\n- title: character varying (NOT NULL) - Provider title/name\n- update_time: timestamp without time zone - When the provider was last updated\n- updated_by: character varying - Who last updated the provider\n- version: bigint - Version number\n\nNote: The provider name in this table (title column) can be joined with the provider column in the casino_games table.\n\n[2025-08-23 12:46:50] Table: sb_casino_games\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- categories: character varying - Game categories\n- create_time: timestamp without time zone - When the entry was created\n- created_by: character varying - Who created the entry\n- game_id: bigint (NOT NULL) - Game identifier (can be joined with game_id in casino_games)\n- house_id: bigint (NOT NULL) - House/casino identifier\n- sequence: integer (NOT NULL) - Order/sequence number\n- sports_book_url: character varying (NOT NULL) - Sports book URL\n- state: integer - State of the game\n- update_time: timestamp without time zone - When the entry was last updated\n- updated_by: character varying - Who last updated the entry\n- version: bigint - Version number\n\n[2025-08-23 12:46:59] Table: sb_casino_providers\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- create_time: timestamp without time zone - When the entry was created\n- created_by: character varying - Who created the entry\n- house_id: bigint (NOT NULL) - House/casino identifier\n- provider_id: bigint (NOT NULL) - Provider identifier (can be joined with id in casino_providers)\n- sequence: integer (NOT NULL) - Order/sequence number\n- sports_book_url: character varying (NOT NULL) - Sports book URL\n- update_time: timestamp without time zone - When the entry was last updated\n- updated_by: character varying - Who last updated the entry\n- version: bigint - Version number\n\n[2025-08-23 12:47:10] Table: gap_casino_games\nColumns:\n- id: bigint (NOT NULL) - Primary key\n- category: character varying - Game category\n- game_code: character varying - Game code\n- game_id: character varying - Game identifier\n- game_name: character varying - Name of the game\n- house_id: bigint - House/casino identifier\n- provider_name: character varying - Provider name\n- state: character varying - State of the game (default: 'PENDING')\n- sub_provider_name: character varying - Sub-provider name\n- url_background: character varying - Background image URL\n- url_thumb: character varying - Thumbnail image URL\n- enable: character varying - Indicates if the game is enabled\n- status: character varying - Game status\n- trending: boolean - Indicates if the game is trending (default: false)\n- trending_thumbnail: character varying - Trending thumbnail URL\n- bonus_enabled: boolean - Indicates if bonus is enabled (default: false)\n- priority: integer - Priority/ranking of the game\n- tag: character varying - Game tag\n- super_provider_name: character varying - Super provider name (default: 'GAP')\n- provider_tag: character varying - Provider tag\n\n[2025-08-23 12:47:19] Table Relationships:\n\n1. casino_games and casino_providers:\n   - casino_games.provider can be joined with casino_providers.title\n   - Both tables share house_id for filtering by casino\n\n2. casino_games and casino_categories:\n   - casino_categories.game_ids likely contains IDs that match casino_games.game_id\n   - Both tables share house_id for filtering by casino\n\n3. sb_casino_games and casino_games:\n   - sb_casino_games.game_id can be joined with casino_games.id or casino_games.game_id\n   - Both tables share house_id for filtering by casino\n\n4. sb_casino_providers and casino_providers:\n   - sb_casino_providers.provider_id can be joined with casino_providers.id\n   - Both tables share house_id for filtering by casino\n\n5. gap_casino_games relationships:\n   - gap_casino_games.provider_name might correspond to casino_providers.title\n   - gap_casino_games.game_id might correspond to casino_games.game_id (though data types differ)\n   - gap_casino_games.house_id can be joined with house_id in other tables\n\n6. Common fields across tables:\n   - house_id: Present in all tables, can be used to filter by specific casino\n   - id: Primary key in all tables\n   - create_time/update_time: Tracking when records were created/modified\n   - created_by/updated_by: Tracking who created/modified records\n   - version: Version tracking present in most tables\n\n[2025-08-23 12:47:40] Sample Data:\n\ngap_casino_games table contains actual data with entries like:\n1. Excite Asia Lobby (Provider: MAC88, Category: Game Lobby)\n2. 6+ Poker (Provider: BETGAMES, Category: others)\n3. Sunset Highways (Provider: TC, Category: Slots)\n4. Classic Baccarat 3 (Provider: EEAI, Category: Live)\n5. x1000 Quantum Roulette (Provider: DC, Category: Live Roulette)\n\nThis confirms that the database contains information about various casino games from different providers, categorized by game types like Slots, Live games, etc.\n\nGame categories observed include: Game Lobby, others, Slots, Live, Live Roulette.\nProviders observed include: MAC88, BETGAMES, TC, EEAI, DC.\n\n[2025-08-23 12:47:58] Main Game Categories:\nThe database contains a wide variety of game categories (440 distinct values), which can be broadly grouped into:\n1. Major game types: Slots, Live, Table Games, Card Games, Bingo, Lottery, Crash Games, Arcade\n2. Specific game titles: Like \"dragonsluck\", \"megaball\", \"gonzosquestmegaways\"\n3. Game variants: Like \"Live Roulette\", \"Live Blackjack\", \"Video Poker\"\n4. Generic categories: Like \"Premium Slots\", \"Game Shows\"\n\nMain Providers (sample):\nAWC, BETGAMES, CRASH88, CREED, DARWIN, DC, EA, EEAI, EVOLUTION, EZUGI, FIESTA777, GAPLOBBY, INPLM, JACKTOP, JiLi, KINGMIDAS, LLG, MAC88, MACAW, MARBLES, MATKA, N2Live, NMATIC, PINKY, POPOK, RG, RICH88, SAP, SPRIBE, SUNO\n\nThis information shows that the database contains a comprehensive catalog of casino games across different categories and from numerous providers.\n\n[2025-08-23 12:48:09] Database Summary for Casino Games:\n\n1. Main Tables:\n   - casino_games: Primary table with game details including provider, type, limits\n   - casino_games_old: Legacy version with fewer columns\n   - casino_categories: Categories for organizing games\n   - casino_providers: Information about game providers\n   - sb_casino_games: Likely a sportsbook-related mapping for casino games\n   - sb_casino_providers: Likely a sportsbook-related mapping for providers\n   - gap_casino_games: Appears to be the most actively used table with current game data\n\n2. Key Relationships:\n   - Games are linked to providers (casino_games.provider \u2192 casino_providers.title)\n   - Games are organized into categories (game_ids in casino_categories)\n   - Multiple tables share house_id for filtering by casino/operator\n   - sb_casino_games links to casino_games via game_id\n   - sb_casino_providers links to casino_providers via provider_id\n\n3. Content Overview:\n   - Wide variety of game categories (440+ distinct values)\n   - Major game types include: Slots, Live Casino, Table Games, Card Games, Bingo, Lottery, Crash Games\n   - Numerous game providers (30+ distinct providers)\n   - Games have attributes like enable/disable status, min/max limits, URLs, thumbnails\n\n4. Query Patterns:\n   - Filter games by provider: WHERE provider_name = 'X' or JOIN with casino_providers\n   - Filter games by category: WHERE category = 'Y'\n   - Filter active/enabled games: WHERE enable = 'Y' or active = true\n   - Filter by house/casino: WHERE house_id = Z\n   - Join tables to get complete game information with provider details"
  },
  "AffiliateAgent": {
    "class": "CustomAgent",
    "description": "Focuses on affiliate relationships, campaigns, and commissions. This agent can answer questions about affiliate performance, commission structures, and campaign effectiveness. Tables: affiliate, affiliate_account, affiliate_campaign, affiliate_comm_history, affiliate_entry, affiliate_policy, campaign_entry, commission_ledger, comm_entry_entity, user_commission_history",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are AffiliateAgent, a specialized database agent focused on affiliate relationships and commissions.\n\nYour expertise covers these tables: affiliate, affiliate_account, affiliate_campaign, affiliate_comm_history, affiliate_entry, affiliate_policy, campaign_entry, commission_ledger, comm_entry_entity, user_commission_history.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on affiliate performance, commission structures, and campaign effectiveness",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:50:53] DATABASE SCHEMA INFORMATION:\n\n1. affiliate table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id, user_affiliate_id\n- Contains affiliate performance metrics: sign_ups, first_deposits, first_deposits_amount, re_deposits, re_deposit_amount, total_deposits, total_deposit_amount\n- Financial metrics: commission, wagered_commission, classic_commission, placed_stake, returns, pl\n- Tracking fields: create_time, update_time, start_date, end_date\n- Identifiers: username, sports_book, account_path, affiliate_path, role\n\n2. affiliate_account table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id, user_affiliate_id\n- Financial data: commission_percentage, total_commission\n- Performance metrics: life_time_sign_ups, life_time_first_deposits, life_time_ftd_amount, total_deposits, total_deposit_amount\n- Configuration: commission_cycle, settlement_cycle, user_creation_enabled\n- Identifiers: user_name, sports_book, account_path, affiliate_path, role, currency_type\n\n3. affiliate_campaign table:\n- Key columns: id (likely primary key), account_id, affiliate_id, parent_id, house_id, user_affiliate_id\n- Campaign identifiers: campaign_id, campaign_name\n- Financial data: commission_percentage, total_commission, available_commission\n- Performance metrics: life_time_sign_ups, life_time_first_deposits, life_time_ftd_amount, total_deposits, total_deposit_amount, total_wagered_amount\n- Tracking fields: update_time\n\n4. affiliate_comm_history table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id, user_affiliate_id\n- Commission changes: old_percentage, current_percentage\n- Configuration: commission_cycle, settlement_cycle\n- Tracking fields: create_time, update_time, start_date, end_date\n- Identifiers: user_name, sports_book, account_path, affiliate_path, role\n\n5. affiliate_entry table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id\n- Commission data: comm_percentage, commission, ftd_commission, commission_transferred\n- Performance metrics: sign_ups, first_deposits, first_deposits_amount, comm_eligible_first_deposits, comm_eligible_first_deposits_amount, total_deposits, total_deposit_amount\n- Financial metrics: placed_stake, returns, pl, total_withdrawals, total_withdrawal_amount\n- Tracking fields: create_time, update_time, start_date, end_date, comm_interval\n- Identifiers: username, sports_book, account_path, affiliate_path, role\n\n6. affiliate_policy table:\n- Key columns: id (likely primary key), account_id, affiliate_id\n- Policy configuration: commission_percentage, affiliate_tier, is_active, is_alive, rule_settings\n- Tracking fields: create_time, update_time, start_date, end_date\n- Identifiers: affiliate_path\n\n7. campaign_entry table:\n- Key columns: id (likely primary key), account_id, affiliate_id, parent_id, house_id, user_affiliate_id\n- Campaign identifiers: campaign_id, campaign_name\n- Performance metrics: sign_ups, first_deposits, first_deposits_amount, re_deposits, re_deposit_amount, total_deposits, total_deposit_amount, comm_eligible_first_deposits, comm_eligible_first_deposits_amount\n- Financial metrics: ftd_commission, wagered_commission, classic_commission, pl, total_withdrawals, total_withdrawal_amount, total_wagered_amount\n- Tracking fields: create_time, update_time, start_date, end_date, version\n- Identifiers: user_name, sports_book, account_path, affiliate_path, role\n\n8. commission_ledger table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id\n- Commission data: commission, commission_percentage, commission_method, commission_type\n- Event information: event_id, event_name, event_date, market_id, market_name, market_type, sport_id, competition_id, competition_name, provider_id\n- Financial metrics: total_pl\n- Other fields: owner_name, status, create_time\n\n9. comm_entry_entity table:\n- Key columns: id (likely primary key), account_id, parent_id, house_id\n- Commission data: comm_percentage, commission, commission_interval\n- Financial metrics: placed_stake, returns, pl, total_deposits, total_deposit_amount, total_withdrawals, total_withdrawal_amount\n- Tracking fields: create_time, update_time, start_date, end_date, version\n- Identifiers: username, sports_book, account_path, role\n\n10. user_commission_history table:\n- Key columns: id (likely primary key), account_id, house_id\n- Commission changes: old_percentage, current_percentage\n- Tracking fields: update_time\n- Identifiers: account_path\n\nRELATIONSHIPS (based on common column names):\n- The 'id' column appears in all tables and likely serves as the primary key\n- 'account_id' appears in most tables and likely links affiliates to their accounts\n- 'parent_id' suggests hierarchical relationships between affiliates\n- 'house_id' appears in most tables and likely identifies the operator/platform\n- 'user_affiliate_id' appears in several tables and may link to user accounts\n- 'affiliate_id' in affiliate_campaign, affiliate_policy, and campaign_entry likely references the affiliate table\n- 'account_path' and 'affiliate_path' appear in multiple tables and likely represent hierarchical paths\n- 'campaign_id' links affiliate_campaign and campaign_entry tables\n\nCommon metrics across tables:\n- Sign-ups: Number of new users registered\n- First deposits (FTD): Number and amount of first-time deposits\n- Re-deposits: Number and amount of subsequent deposits\n- Total deposits: Overall deposit counts and amounts\n- Commission: Various commission calculations (classic, wagered, etc.)\n- Placed stake: Amount wagered\n- Returns: Amount returned to players\n- PL: Profit/Loss\n- Withdrawals: Number and amount of withdrawals\n\nThe database appears to track affiliate performance, commission calculations, and campaign effectiveness with detailed metrics at various levels (affiliate, account, campaign)."
  },
  "ProfitLossAgent": {
    "class": "CustomAgent",
    "description": "Tracks profit/loss metrics and house performance. This agent can answer questions about financial performance, daily house P&L, and exposure logs. Tables: pl, daily_house_pl, exposure_log, ha_pl_entity, kpi_entity, daily_entry",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are ProfitLossAgent, a specialized database agent focused on profit/loss tracking and performance metrics.\n\nYour expertise covers these tables: pl, daily_house_pl, exposure_log, ha_pl_entity, kpi_entity, daily_entry.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on financial performance, daily house P&L, and exposure tracking",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:52:48] Table: pl\nPrimary Key: id\nDescription: Stores profit and loss data for markets and events.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- win_count (bigint): Number of winning bets\n- account_id (bigint): ID of the account\n- market_type (integer): Type of market\n- matched_bets (bigint): Number of matched bets\n- matched_risk (double precision): Risk amount for matched bets\n- net_risk (double precision): Net risk amount\n- open_count (bigint): Count of open bets\n- parent_id (bigint): Parent account ID\n- settlement_amount (double precision): Amount settled\n- unmatched_bets (bigint): Number of unmatched bets\n- unmatched_risk (double precision): Risk amount for unmatched bets\n- update_time (timestamp): Last update time\n- user_count (bigint): Count of users\n- voided_count (bigint): Count of voided bets\n- bets_count (bigint): Total count of bets\n- category_type (integer): Type of category\n- create_time (timestamp): Creation time\n- event_date (timestamp): Date of the event\n- house_id (bigint): ID of the house\n- lossback_amount (double precision): Amount of lossback\n- lost_count (bigint): Count of lost bets\n- market_status (integer): Status of the market\n- account_path (varchar): Path of the account\n- market_name (varchar): Name of the market\n- market_result (varchar): Result of the market\n- competition_id (varchar): ID of the competition\n- competition_name (varchar): Name of the competition\n- sport_id (varchar): ID of the sport\n- sports_book (varchar): Sports book name\n- event_id (varchar): ID of the event\n- event_name (varchar): Name of the event\n- provider_id (varchar): ID of the provider\n- role (varchar): Role\n- username (varchar): Username\n- market_id (varchar): ID of the market\n\n[2025-08-23 12:52:56] Table: daily_house_pl\nPrimary Key: id\nDescription: Stores daily profit and loss data for houses.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- affiliate_bonus (numeric, default 0.00): Affiliate bonus amount\n- closing_balance (numeric, default 0.00): Closing balance\n- create_time (timestamp with time zone, default CURRENT_TIMESTAMP): Creation time\n- end_date (timestamp with time zone, default CURRENT_TIMESTAMP): End date\n- house_id (bigint, NOT NULL): ID of the house\n- house_pl (numeric, default 0.00): House profit/loss\n- opening_balance (numeric, default 0.00): Opening balance\n- start_date (timestamp with time zone, default CURRENT_TIMESTAMP): Start date\n- total_house_pl (numeric, default 0.00): Total house profit/loss\n- update_time (timestamp with time zone, default CURRENT_TIMESTAMP): Update time\n- user_bonus (numeric, default 0.00): User bonus amount\n- user_deposit (numeric, default 0.00): User deposit amount\n- user_pg_deposit (numeric, default 0.00): User payment gateway deposit amount\n- user_pg_withdrawal (numeric, default 0.00): User payment gateway withdrawal amount\n- user_refund (numeric, default 0.00): User refund amount\n- user_settlement_deposit (numeric, default 0.00): User settlement deposit amount\n- user_settlement_withdrawal (numeric, default 0.00): User settlement withdrawal amount\n- user_win_comm_deposit (numeric, default 0.00): User win commission deposit amount\n- user_win_comm_withdrawal (numeric, default 0.00): User win commission withdrawal amount\n- user_withdrawal (numeric, default 0.00): User withdrawal amount\n- version (bigint): Version number\n\n[2025-08-23 12:53:02] Table: exposure_log\nPrimary Key: id\nDescription: Logs user exposure data for bets and markets.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- user_id (bigint, NOT NULL): ID of the user\n- create_time (timestamp): Creation time\n- exposure (double precision, NOT NULL): Exposure amount\n- transaction_type (integer): Type of transaction\n- provider_id (varchar): ID of the provider\n- event_id (varchar): ID of the event\n- event_name (varchar): Name of the event\n- sport_id (varchar): ID of the sport\n- game_type (varchar): Type of game\n- market_id (varchar): ID of the market\n- market_name (varchar): Name of the market\n- bet_id (varchar): ID of the bet\n- category (varchar): Category\n- competition_id (varchar): ID of the competition\n- competition_name (varchar): Name of the competition\n\n[2025-08-23 12:53:07] Table: ha_pl_entity\nPrimary Key: id\nDescription: Stores house account profit and loss entity data.\nColumns:\n- id (varchar, NOT NULL): Primary key\n- day (date, NOT NULL): Date of the record\n- house_id (bigint, NOT NULL): ID of the house\n- profit (double precision, NOT NULL): Profit amount\n- category_type (varchar, NOT NULL): Type of category\n\n[2025-08-23 12:53:12] Table: kpi_entity\nPrimary Key: id\nDescription: Stores Key Performance Indicator data.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- create_time (timestamp, NOT NULL): Creation time\n- reference_id (bigint): Reference ID\n- value (double precision, NOT NULL): Value of the KPI\n- account_mode (integer): Mode of the account\n- account_id (bigint): ID of the account\n- account_path (varchar, NOT NULL): Path of the account\n- category (varchar, NOT NULL): Category\n- sub_category (varchar, NOT NULL): Sub-category\n- username (varchar): Username\n- sports_book (varchar): Sports book name\n\n[2025-08-23 12:53:22] Table: daily_entry\nPrimary Key: id\nDescription: Stores daily entry data for accounts including financial metrics.\nColumns:\n- id (bigint, NOT NULL): Primary key\n- house_id (bigint): ID of the house\n- account_id (bigint): ID of the account\n- parent_id (bigint): Parent account ID\n- interval (smallint): Interval\n- start_date (timestamp with time zone, default now()): Start date\n- end_date (timestamp with time zone, default now()): End date\n- create_time (timestamp with time zone, default now()): Creation time\n- update_time (timestamp with time zone, default now()): Update time\n- placed_stake (numeric, default 0): Placed stake amount\n- returns (numeric, default 0): Returns amount\n- pl (numeric, default 0): Profit/Loss amount\n- deposits (bigint, default 0): Number of deposits\n- withdrawals (bigint, default 0): Number of withdrawals\n- deposit_amount (numeric, default 0): Total deposit amount\n- withdrawal_amount (numeric, default 0): Total withdrawal amount\n- sign_ups (bigint, default 0): Number of sign ups\n- first_deposits (bigint, default 0): Number of first deposits\n- first_deposits_amount (numeric, default 0): Amount of first deposits\n- life_time_sign_ups (bigint, default 0): Lifetime sign ups\n- life_time_deposits (bigint, default 0): Lifetime deposits\n- life_time_deposits_amount (bigint, default 0): Lifetime deposit amount\n- life_time_withdrawals (bigint, default 0): Lifetime withdrawals\n- life_time_withdraw_amount (bigint, default 0): Lifetime withdrawal amount\n- life_time_first_deposits (bigint, default 0): Lifetime first deposits\n- life_time_ftd_amount (numeric, default 0): Lifetime first deposit amount\n- life_time_placed_stake (numeric, default 0): Lifetime placed stake\n- life_time_profit (numeric, default 0): Lifetime profit\n- version (bigint): Version number\n- username (varchar): Username\n- sports_book (varchar): Sports book name\n- role (varchar): Role\n- account_path (varchar): Path of the account\n- affiliate_path (varchar): Path of the affiliate\n\n[2025-08-23 12:53:32] Table Relationships:\n\n1. house_id is a common key across multiple tables:\n   - pl.house_id\n   - daily_house_pl.house_id\n   - ha_pl_entity.house_id\n   - daily_entry.house_id\n   These can be joined to analyze profit/loss data across different house entities.\n\n2. account_id is present in:\n   - pl.account_id\n   - kpi_entity.account_id\n   - daily_entry.account_id\n   This can be used to link account-specific data across tables.\n\n3. User identification:\n   - exposure_log.user_id identifies specific users\n   - pl.username, kpi_entity.username, and daily_entry.username can be used to track user activities\n\n4. Time-based analysis:\n   - pl.create_time, pl.update_time, pl.event_date\n   - daily_house_pl.create_time, daily_house_pl.update_time, daily_house_pl.start_date, daily_house_pl.end_date\n   - exposure_log.create_time\n   - kpi_entity.create_time\n   - daily_entry.create_time, daily_entry.update_time, daily_entry.start_date, daily_entry.end_date\n   - ha_pl_entity.day\n   These can be used for time-series analysis and reporting periods.\n\n5. Market and event identification:\n   - pl.market_id, pl.event_id\n   - exposure_log.market_id, exposure_log.event_id\n   These can be used to analyze specific markets or events.\n\n6. Sports and competition data:\n   - pl.sport_id, pl.competition_id\n   - exposure_log.sport_id, exposure_log.competition_id\n   These can be used to analyze performance by sport or competition.\n\n[2025-08-23 12:53:40] Common Query Patterns:\n\n1. Daily Profit/Loss Analysis:\n   - Query daily_house_pl with date filters to analyze daily P&L\n   - Join with ha_pl_entity to get category-specific P&L breakdown\n   - Use daily_entry for more detailed metrics by account\n\n2. User Exposure Analysis:\n   - Query exposure_log filtered by user_id, event_id, or market_id\n   - Aggregate exposure by sport, competition, or market\n   - Track exposure changes over time\n\n3. Market Performance:\n   - Use pl table to analyze performance of specific markets\n   - Group by market_id, event_id, or sport_id\n   - Calculate win rates and settlement amounts\n\n4. KPI Tracking:\n   - Query kpi_entity filtered by category and sub_category\n   - Analyze KPI trends over time using create_time\n   - Compare KPIs across different accounts or sports books\n\n5. Account Hierarchy Analysis:\n   - Use account_path in pl, kpi_entity, and daily_entry\n   - Analyze performance across different levels of the account hierarchy\n   - Roll up metrics from child accounts to parent accounts\n\n6. Time-Series Analysis:\n   - Use date fields across tables for trend analysis\n   - Compare performance across different time periods\n   - Identify seasonal patterns or anomalies"
  },
  "ConfigurationAgent": {
    "class": "CustomAgent",
    "description": "Manages system configurations and whitelabel settings. This agent can answer questions about system configurations, whitelabel settings, and integration details. Tables: house_settings, whitelabel_config, whitelabel_domain_aliases, whitelabel_skins, wl_sdm_info, integrator, group_admin_entity, assets, banners",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are ConfigurationAgent, a specialized database agent focused on system configurations and whitelabel settings.\n\nYour expertise covers these tables: house_settings, whitelabel_config, whitelabel_domain_aliases, whitelabel_skins, wl_sdm_info, integrator, group_admin_entity, assets, banners.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on system configurations, whitelabel settings, and platform integrations",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:56:13] TABLE SCHEMAS:\n\n1. house_settings:\n- id (bigint, NOT NULL)\n- account_hierarchy_style (character varying)\n- admin_multi_session_enabled (boolean)\n- bucket_name (character varying)\n- max_commission_turnover (numeric, DEFAULT 0.0)\n- min_commission_odd (numeric, DEFAULT 0.0)\n- env_category (character varying)\n- gap_base_url (character varying)\n- gap_operator_id (character varying)\n- house_id (bigint)\n- result_type (integer, DEFAULT 0)\n- sap_operator_id (character varying)\n- sap_partner_ids (character varying)\n- premium_sport_operator_id (character varying)\n- premium_sport_partner_ids (character varying)\n- sap_base_url (character varying)\n- sap_catalog_base_url (character varying)\n- exchange_sport_operator_id (character varying)\n- exchange_sport_partner_ids (character varying)\n- wallet_hierarchy_style (character varying)\n- sports_min_stake (numeric, DEFAULT 0.00)\n- payments_bucket_name (character varying)\n- sms_client (character varying, NOT NULL, DEFAULT 'TEXTLOCAL')\n- cricket_bm_result_type (integer, DEFAULT 2)\n- cricket_mo_result_type (integer, DEFAULT 2)\n- soccer_mo_result_type (integer, DEFAULT 2)\n- soccer_bm_result_type (integer, DEFAULT 2)\n- tennis_mo_result_type (integer, DEFAULT 2)\n- tennis_bm_result_type (integer, DEFAULT 2)\n- machub_base_url (character varying)\n- machub_operator_id (character varying)\n- validate_rollback_otp (boolean, DEFAULT false)\n- mac444_base_url (character varying)\n- mac444_operator_id (character varying)\n\n[2025-08-23 12:56:21] 2. whitelabel_config:\n- id (integer, NOT NULL, DEFAULT nextval('whitelabel_config_id_seq'))\n- theme_name (character varying, NOT NULL)\n- brand_name (character varying, NOT NULL)\n- brand_domain (character varying, NOT NULL)\n- logo_path (character varying)\n- favicon_path (character varying)\n- is_active (boolean, NOT NULL, DEFAULT true)\n- created_by (bigint)\n- updated_by (bigint)\n- created_at (timestamp without time zone, DEFAULT CURRENT_TIMESTAMP)\n- updated_at (timestamp without time zone, DEFAULT CURRENT_TIMESTAMP)\n- domain_aliases (text, DEFAULT '[]')\n- skins (text, DEFAULT '[]')\n- primary_skin (character varying)\n\n3. whitelabel_domain_aliases:\n- id (integer, NOT NULL, DEFAULT nextval('whitelabel_domain_aliases_id_seq'))\n- domain (character varying, NOT NULL)\n- is_active (boolean, NOT NULL, DEFAULT true)\n- whitelabel_config_id (bigint, NOT NULL) - Foreign key to whitelabel_config.id\n\n4. whitelabel_skins:\n- id (integer, NOT NULL, DEFAULT nextval('whitelabel_skins_id_seq'))\n- label (character varying, NOT NULL)\n- domain (character varying, NOT NULL)\n- disabled (boolean, DEFAULT false)\n- is_active (boolean, NOT NULL, DEFAULT true)\n- whitelabel_config_id (bigint, NOT NULL) - Foreign key to whitelabel_config.id\n\n[2025-08-23 12:56:27] 5. wl_sdm_info:\n- id (bigint, NOT NULL)\n- contact_list (bytea)\n- house_id (bigint)\n- is_active (boolean, DEFAULT false)\n- sdm_currency_type (integer)\n- sdm_id (bigint, NOT NULL)\n- sdm_username (character varying, NOT NULL)\n- sports_book_url (character varying, NOT NULL)\n- role (character varying, DEFAULT '')\n\n6. integrator:\n- id (integer, NOT NULL, DEFAULT nextval('integrator_id_seq'))\n- name (character varying)\n- prefix (character varying)\n- house_id (bigint)\n- sports_book (character varying)\n- type (character varying)\n- integration_type (character varying)\n- currency (character varying)\n- public_key (text, DEFAULT '')\n\n[2025-08-23 12:56:34] 7. group_admin_entity:\n- id (bigint, NOT NULL)\n- grp_admin_id (bigint, NOT NULL)\n- grp_admin_username (character varying, NOT NULL)\n- house_id (bigint)\n- sports_book_url (character varying, NOT NULL)\n\n8. assets:\n- id (bigint, NOT NULL)\n- category (integer, NOT NULL)\n- create_time (timestamp without time zone)\n- created_by (character varying)\n- device_type (integer, NOT NULL)\n- house_id (bigint, NOT NULL)\n- public_url (character varying, NOT NULL)\n- sports_book_url (character varying, NOT NULL)\n- title (character varying, NOT NULL)\n- type (integer, NOT NULL)\n- update_time (timestamp without time zone)\n- updated_by (character varying)\n- usage_count (integer)\n- version (bigint)\n\n[2025-08-23 12:56:39] 9. banners:\n- id (bigint, NOT NULL)\n- banner_id (character varying, NOT NULL)\n- category (character varying, NOT NULL)\n- device_type (character varying, NOT NULL)\n- display_content (text, DEFAULT '')\n- house_id (bigint, NOT NULL)\n- is_active (boolean, NOT NULL)\n- level (integer, NOT NULL)\n- public_url (character varying, NOT NULL)\n- redirection_url (character varying, NOT NULL)\n- sports_book_url (character varying, NOT NULL)\n- title (character varying, NOT NULL)\n- account_id (bigint)\n- sub_category (character varying)\n- image_content (text, DEFAULT '')\n\n[2025-08-23 12:56:47] RELATIONSHIPS AND KEY FIELDS:\n\n1. Common joining fields:\n- house_id: Present in house_settings, wl_sdm_info, integrator, group_admin_entity, assets, and banners\n- sports_book_url: Present in wl_sdm_info, group_admin_entity, assets, and banners\n\n2. Whitelabel relationships:\n- whitelabel_config_id in whitelabel_domain_aliases and whitelabel_skins references whitelabel_config.id\n\n3. Table purposes:\n- house_settings: Contains system-wide configuration settings\n- whitelabel_config: Stores branding and theming configuration for different whitelabel instances\n- whitelabel_domain_aliases: Maps additional domains to whitelabel configurations\n- whitelabel_skins: Defines different UI skins available for whitelabel instances\n- wl_sdm_info: Stores information about SDM (Service Delivery Manager) configurations\n- integrator: Contains configuration for third-party integration services\n- group_admin_entity: Stores information about group administrators\n- assets: Manages various digital assets like images, documents, etc.\n- banners: Stores promotional banner configurations for the platform"
  },
  "NotificationAgent": {
    "class": "CustomAgent",
    "description": "Handles system notifications and user communications. This agent can answer questions about notifications sent to users and system alerts. Tables: notification, user_notification",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are NotificationAgent, a specialized database agent focused on system notifications and user communications.\n\nYour expertise covers these tables: notification, user_notification.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on notifications sent to users and system alerts",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:58:25] Table: notification\n- Primary Key: id (bigint)\n- Columns:\n  * id (bigint, NOT NULL) - Primary key\n  * active (boolean, default false) - Indicates if the notification is active\n  * created_by (varchar) - User who created the notification\n  * date_created (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification was created\n  * end_time (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification expires\n  * house_id (bigint) - House/platform identifier\n  * last_updated (timestamp with time zone) - When notification was last updated\n  * message (text) - Notification content\n  * permission (double precision, default 31) - Permission level required\n  * sports_book (varchar) - Sports book identifier\n  * start_time (timestamp with time zone, default CURRENT_TIMESTAMP) - When notification becomes active\n  * title (text) - Notification title\n  * updated_by (varchar) - User who last updated the notification\n\nIndexes on notification table:\n- notification_pkey: UNIQUE INDEX on id\n- notification_house_id_index: INDEX on house_id\n- not_hid_sb_idx: INDEX on (house_id, sports_book)\n- not_hid_ac_sb_index: INDEX on (house_id, active, sports_book)\n\nTable: user_notification\n- Primary Key: id (bigint)\n- Columns:\n  * id (bigint, NOT NULL) - Primary key\n  * house_id (bigint) - House/platform identifier\n  * alias (varchar) - User alias/username\n  * user_id (bigint) - User identifier\n  * title (text) - Notification title\n  * message (text) - Notification content\n  * active_notification (boolean, default false) - Indicates if the notification is active\n  * date_created (timestamp with time zone, default now()) - When notification was created\n  * last_updated (timestamp with time zone) - When notification was last updated\n\nIndexes on user_notification table:\n- pk_user_notification: UNIQUE INDEX on id\n- user_notification_active_notification_index: INDEX on active_notification\n- user_notification_time_status_index: INDEX on (date_created, active_notification)\n- user_notification_user_id_index: INDEX on (alias, active_notification)\n\nRelationships:\n- The notification table appears to store system-wide notifications with house_id to identify the platform.\n- The user_notification table stores notifications targeted to specific users with user_id and alias fields.\n- Both tables share common fields like house_id, title, message, active status, and timestamps.\n- No explicit foreign key relationships were found, but house_id appears in both tables and could be used for joins.\n- The user_notification table likely references users through user_id and alias fields.\n\nCommon Query Patterns:\n- Filtering notifications by active status\n- Filtering notifications by house_id\n- Filtering user notifications by user_id or alias\n- Sorting notifications by date_created or last_updated\n- Joining notifications with user_notification based on house_id"
  },
  "EventTrackingAgent": {
    "class": "CustomAgent",
    "description": "Tracks domain events and system changes. This agent can answer questions about system events, catalog changes, and database modifications. Tables: account_domain_event, wallet_domain_event, order_domain_event, catalog_domain_event, databasechangelog, databasechangeloglock, shedlock",
    "model_type": "bedrock",
    "model_name": "anthropic.claude-3-7-sonnet-20250219-v1:0",
    "system_prompt": "\nYou are EventTrackingAgent, a specialized database agent focused on domain events and system tracking.\n\nYour expertise covers these tables: account_domain_event, wallet_domain_event, order_domain_event, catalog_domain_event, databasechangelog, databasechangeloglock, shedlock.\n\nAdditional Instructions:\n- When a user request requires multiple tool executions (e.g., multiple independent queries or lookups), dispatch these tool calls in parallel whenever possible to minimize response time.\n- Aggregate and summarize the results from all parallel tool calls before responding to the user.\n- If any tool call fails, report the error clearly but still return results from successful tool calls.\n- Only execute tool calls in parallel if they are independent and do not depend on each other's results.\n\nInstructions:\n- Only query the tables within your domain of expertise\n- Only allow and execute read-only queries (e.g., SELECT). Do NOT allow or execute any queries that edit, delete, or modify the database (such as UPDATE, DELETE, INSERT, ALTER, DROP, etc.).\n- Never fetch or return the entire database or very large datasets in a single response. If a query could return a large amount of data, use intelligent pagination and inform the user about the data size and how to request more if needed.\n- Always prioritize concise, relevant answers. Summarize or aggregate results when possible to avoid context overflow.\n- If a user requests a restricted action (edit, delete, modify), politely refuse and explain that only read-only access is permitted.\n- When answering, provide clear explanations in natural language. Do NOT show SQL queries unless the user explicitly asks for them (e.g., \"show SQL\" or \"give me the query\").\n- Do not ask users for query confirmation. Always infer the required details and generate the answer directly.\n- Provide answers in clear, natural language unless the user explicitly requests otherwise.\n- Focus on system events, catalog changes, and database modifications",
    "tools": [
      "postgres_query",
      "append_memory"
    ],
    "parallel_tools": true,
    "max_parallel_tools": 3,
    "memory": "[2025-08-23 12:59:34] Table: account_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to account operations/changes.\n\n[2025-08-23 12:59:41] Table: wallet_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to wallet operations/changes.\n\n[2025-08-23 12:59:48] Table: order_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to order operations/changes.\n\n[2025-08-23 12:59:56] Table: catalog_domain_event\nColumns:\n- id: bigint, NOT NULL (Primary key)\n- data: bytea, nullable\n- data_content_type: character varying, nullable\n- house_id: bigint, nullable\n- source: character varying, nullable\n- time: timestamp with time zone, nullable, default: CURRENT_TIMESTAMP(6)\n- type: character varying, nullable\nPurpose: Stores domain events related to catalog operations/changes. Has an additional house_id column not present in other domain event tables.\n\n[2025-08-23 13:00:06] Table: databasechangelog\nColumns:\n- id: character varying, NOT NULL (Part of composite primary key)\n- author: character varying, NOT NULL (Part of composite primary key)\n- filename: character varying, NOT NULL (Part of composite primary key)\n- dateexecuted: timestamp without time zone, NOT NULL\n- orderexecuted: integer, NOT NULL\n- exectype: character varying, NOT NULL\n- md5sum: character varying, nullable\n- description: character varying, nullable\n- comments: character varying, nullable\n- tag: character varying, nullable\n- liquibase: character varying, nullable\n- contexts: character varying, nullable\n- labels: character varying, nullable\n- deployment_id: character varying, nullable\nPurpose: Tracks database schema changes managed by Liquibase. Contains records of all database migrations that have been applied.\n\n[2025-08-23 13:00:14] Table: databasechangeloglock\nColumns:\n- id: integer, NOT NULL (Primary key)\n- locked: boolean, NOT NULL\n- lockgranted: timestamp without time zone, nullable\n- lockedby: character varying, nullable\nPurpose: Used by Liquibase to prevent multiple instances from attempting to update the database simultaneously. Acts as a locking mechanism for database migrations.\n\n[2025-08-23 13:00:23] Table: shedlock\nColumns:\n- name: character varying, NOT NULL (Primary key)\n- lock_until: timestamp without time zone, nullable\n- locked_at: timestamp without time zone, nullable\n- locked_by: character varying, nullable\nPurpose: Used for distributed task scheduling, ensuring that scheduled tasks in a clustered environment run only once at the same time (prevents duplicate execution).\n\n[2025-08-23 13:00:31] Domain Event Tables Common Pattern:\nThe tables account_domain_event, wallet_domain_event, order_domain_event, and catalog_domain_event share a similar structure:\n- All have 'id' as primary key (bigint)\n- All contain 'data' column (bytea) that likely stores serialized event data\n- All have 'data_content_type' to indicate the format of the data\n- All have 'source' to indicate the origin of the event\n- All have 'time' with default CURRENT_TIMESTAMP(6)\n- All have 'type' to classify the event\n- Only catalog_domain_event has an additional 'house_id' column\n\nDatabase Management Tables:\n- databasechangelog: Tracks database schema changes (Liquibase migrations)\n- databasechangeloglock: Prevents concurrent Liquibase migrations\n- shedlock: Manages distributed task scheduling locks\n\nRelationships:\n- The domain event tables don't appear to have direct foreign key relationships with each other\n- They likely relate to other tables in the system not included in this exploration\n- The domain event tables follow the event sourcing pattern, capturing state changes in the system\n\n[2025-08-23 13:00:37] Query Patterns:\n1. To query domain events by time range:\n   SELECT * FROM [domain_event_table] WHERE time BETWEEN [start_time] AND [end_time]\n\n2. To query domain events by type:\n   SELECT * FROM [domain_event_table] WHERE type = '[event_type]'\n\n3. To count events by type:\n   SELECT type, COUNT(*) FROM [domain_event_table] GROUP BY type\n\n4. To find recent database changes:\n   SELECT id, author, filename, dateexecuted, description FROM databasechangelog ORDER BY dateexecuted DESC LIMIT [n]\n\n5. To check if any database migration is currently running:\n   SELECT * FROM databasechangeloglock WHERE locked = true\n\n6. To check scheduled tasks that are currently locked:\n   SELECT * FROM shedlock WHERE lock_until > NOW()\n\n7. For catalog events related to a specific house:\n   SELECT * FROM catalog_domain_event WHERE house_id = [house_id]"
  }
}